<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git for Windows</title>
      <link href="2021/01/03/Git-for-Windows/"/>
      <url>2021/01/03/Git-for-Windows/</url>
      
        <content type="html"><![CDATA[<p>　　来记录一下 Git for Windows 的使用。</p><a id="more"></a><h2 id="2020-1-3"><a href="#2020-1-3" class="headerlink" title="2020-1-3"></a>2020-1-3</h2><p>　　每次打开 VS Code 时右下角总提示这个，还是更新一下吧，直接点击更新 GIT。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/%E6%9B%B4%E6%96%B0GIT.png" alt="更新GIT"></p><p>　　原来是跳转到 Git 官网。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/Git%E5%AE%98%E7%BD%91.png" alt="Git官网"></p><p>　　这里会跳转到 IE 浏览器，呵呵，赶紧到 Windows 的所有设置-应用-默认应用中把 Web 浏览器设置成 Microsoft Edge 再打开 Git 官网。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/Microsoft-Edge.png" alt="Microsoft Edge"></p><p>　　常规操作：下载，双击安装。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85.png" alt="下载安装"></p><p>　　Only show new option，嗯，很人性化！好评！</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/Only-show-new-option.png" alt="Only show new option"></p><p>　　勾选第二个，以后用<code>git init</code>初始化的默认分支名就为 main 了。</p><div class="note info flat"><p>由于某些原因，2020 年 10 月 1 日，GitHub 将启用 main 作为默认分支名，master 将成为历史！</p></div><p><img src="https://image.ql-isaac.cn/Git-for-Windows/main.png" alt="main"></p><p>　　这个，直接 Next，默认即可。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/%E9%BB%98%E8%AE%A4.png" alt="默认"></p><p>　　credential helper，凭据帮助器？这是个什么玩意儿？star 一下这个<a href="https://github.com/microsoft/Git-Credential-Manager-Core">cross-platform version of the Git Credential Manager</a>先，有时间看看（虽然看不懂）。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/credential-helper.png" alt="credential helper"></p><p>　　实验性的选项：允许在 Git Bash 窗口中运行原生控制台程序，如 Node 或 Python，而不使用 winpty，但它仍然有已知的 bug。不勾选。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/%E5%AE%9E%E9%AA%8C%E6%80%A7%E7%9A%84%E9%80%89%E9%A1%B9.png" alt="实验性的选项"></p><p>　　安装中。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/%E5%AE%89%E8%A3%85%E4%B8%AD.png" alt="安装中"></p><p>　　完成。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/%E5%AE%8C%E6%88%90.png" alt="完成"></p><p>　　Release Notes。</p><p><img src="https://image.ql-isaac.cn/Git-for-Windows/Release-Notes.png" alt="Release Notes"></p>]]></content>
      
      
      <categories>
          
          <category> Git 和 GitHub 从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,World!</title>
      <link href="2020/09/26/hello-world/"/>
      <url>2020/09/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>　　Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>　　More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>　　More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>　　More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>　　More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 数据库从入门到精通（一）</title>
      <link href="2020/02/29/Oracle-Database-Learning(1)/"/>
      <url>2020/02/29/Oracle-Database-Learning(1)/</url>
      
        <content type="html"><![CDATA[<p>　　Oracle 数据库，又名 Oracle RDBMS，或简称 Oracle。是<a href="https://baike.baidu.com/item/%E7%94%B2%E9%AA%A8%E6%96%87%E5%85%AC%E5%8F%B8/430115">甲骨文公司</a>的一款<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/11032386">关系型数据库管理系统</a>。它是在数据库领域一直处于领先地位的产品。可以说 Oracle 数据库是目前世界上最流行的关系型数据库管理系统之一，系统可移植性好、使用方便、功能强，适用于各类大、中、小微机环境。它是一种高效率的、可靠性好的、适应高吞吐量的数据库方案。</p><a id="more"></a><h2 id="下载-Oracle-Database-11g-Release-2"><a href="#下载-Oracle-Database-11g-Release-2" class="headerlink" title="下载 Oracle Database 11g Release 2"></a>下载 Oracle Database 11g Release 2</h2><p>　　访问官方<a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html">Oracle Database 11g Release 2下载地址</a>下载即可，注意有两个压缩包，下好后分别右键解压到当前目录，这样就得到了安装文件夹database。</p><h2 id="安装和配置-Oracle-Database-11g-Release-2"><a href="#安装和配置-Oracle-Database-11g-Release-2" class="headerlink" title="安装和配置 Oracle Database 11g Release 2"></a>安装和配置 Oracle Database 11g Release 2</h2><ol><li>打开 database 文件夹，双击 setup.exe 安装，刚开始有一个如下图的错误，解决办法是编辑 database 下的 stage 下的 cvu 下的 cvu_prereq.xml，在 <CERTIFIED_SYSTEMS></CERTIFIED_SYSTEMS> 间的最后位置添加以下代码，保存并关闭，重新安装即可。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E9%94%99%E8%AF%AF.png" alt="错误"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">OPERATING_SYSTEM</span> <span class="attr">RELEASE</span>=<span class="string">&quot;6.2&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">VERSION</span> <span class="attr">VALUE</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ARCHITECTURE</span> <span class="attr">VALUE</span>=<span class="string">&quot;64-bit&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">NAME</span> <span class="attr">VALUE</span>=<span class="string">&quot;Windows 10&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ENV_VAR</span> <span class="attr">NAME</span>=<span class="string">&quot;PATH&quot;</span> <span class="attr">MAX_LENGTH</span>=<span class="string">&quot;1023&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OPERATING_SYSTEM</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>不更新，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E4%B8%8D%E6%9B%B4%E6%96%B0.png" alt="不更新"></p><ol start="3"><li>直接下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%88%9B%E5%BB%BA.png" alt="创建"></p><ol start="4"><li>选择服务器类，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB.png" alt="服务器类"></p><ol start="5"><li>直接下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%8D%95%E5%AE%9E%E4%BE%8B.png" alt="单实例"></p><ol start="6"><li>选择高级安装，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E9%AB%98%E7%BA%A7%E5%AE%89%E8%A3%85.png" alt="高级安装"></p><ol start="7"><li>默认即可，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E8%AF%AD%E8%A8%80.png" alt="语言"></p><ol start="8"><li>就选择企业版，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E4%BC%81%E4%B8%9A%E7%89%88.png" alt="企业版"></p><ol start="9"><li>默认即可，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E9%BB%98%E8%AE%A4%E5%8D%B3%E5%8F%AF.png" alt="默认即可"></p><ol start="10"><li>默认即可，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E4%B8%8B%E4%B8%80%E6%AD%A5.png" alt="下一步"></p><ol start="11"><li>自定义 SID 的名称，不改，就默认也行；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E8%87%AA%E5%AE%9A%E4%B9%89SID%E7%9A%84%E5%90%8D%E7%A7%B0.png" alt="自定义SID的名称"></p><ol start="12"><li>使用 Unicode 字符集；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/Unicode.png" alt="Unicode"></p><ol start="13"><li>勾选创建具有示例方案的数据库，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%88%9B%E5%BB%BA%E5%85%B7%E6%9C%89%E7%A4%BA%E4%BE%8B%E6%96%B9%E6%A1%88%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="创建具有示例方案的数据库"></p><ol start="14"><li>默认即可，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E8%BF%87.png" alt="过"></p><ol start="15"><li>默认即可，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%86%8D%E8%BF%87.png" alt="再过"></p><ol start="16"><li>不启动自动备份，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD.png" alt="不自动备份"></p><ol start="17"><li>个人学习用，为了方便，设置为对所有账户使用相同的口令（口令必须以字母开头），下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E8%AE%BE%E7%BD%AE%E5%8F%A3%E4%BB%A4.png" alt="设置口令"></p><ol start="18"><li>检查到错误，可以忽略，勾选全部忽略，下一步；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E6%A3%80%E6%9F%A5%E5%88%B0%E9%94%99%E8%AF%AF.png" alt="检查到错误"></p><ol start="19"><li>点击完成，等待；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E7%AD%89%E5%BE%85.png" alt="等待"></p><ol start="20"><li>点击口令管理；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%8F%A3%E4%BB%A4%E7%AE%A1%E7%90%86.png" alt="口令管理"></p><ol start="21"><li>设置 SYS 用户密码为 change_on_install，设置 SYSTEM 用户密码为 manager，解锁 SCOTT 用户并设置密码为 tiger，解锁 SH 用户并设置密码为 sh；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E8%AE%BE%E7%BD%AE%E5%9B%9B%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E5%AF%86%E7%A0%81.png" alt="设置四个用户的密码"></p><ol start="22"><li>安装完成；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%AE%8C%E6%88%90.png" alt="完成"></p><h2 id="SQL-PLUS-的使用"><a href="#SQL-PLUS-的使用" class="headerlink" title="SQL PLUS 的使用"></a>SQL PLUS 的使用</h2><h3 id="登录-SCOTT用户"><a href="#登录-SCOTT用户" class="headerlink" title="登录 SCOTT用户"></a>登录 SCOTT用户</h3><p>　　命令行 CMD 里输入 sqlplus，输入 scott，再输入密码 tiger（不会回显），即可登录 SCOTT 用户。</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E7%99%BB%E5%BD%95scott%E7%94%A8%E6%88%B7.gif" alt="登录scott用户"></p><h3 id="第一次查询"><a href="#第一次查询" class="headerlink" title="第一次查询"></a>第一次查询</h3><p>　　数据库最重要的组成对象是表，登录上 SCOTT 用户后，首先通过以下命令查询一下该用户有哪些表吧。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TAB;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%9F%A5%E8%AF%A2.gif" alt="第一次查询"></p><p>　　呃，查询结果显示得比较乱，有一个命令可以解决这个问题，如下，设置每行显示的数据长度，执行完这个命令后再查询一下 SCOTT用户有哪些表看看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET LINESIZE 100</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98.gif" alt="显示问题"></p><p>　　呃，如果觉得 TNAME 列的数据所占的长度太长了，有一个命令可以解决这个问题，如下，设置 TNAME 列的数据所占的长度，执行完这个命令后再查询一下 SCOTT 用户有哪些表看看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COL TNAME FOR A20</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%A4%AA%E9%95%BF%E4%BA%86.gif" alt="太长了"></p><p>　　终于，能很舒服地查看到 SCOTT 用户下有四个表：BONUS、DEPT、EMP 和 SALGRADE。那么，再查询一下 DEPT 表吧。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPT;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%86%8D%E6%9F%A5%E8%AF%A2%E4%B8%80%E4%B8%8BDEPT%E8%A1%A8.gif" alt="再查询一下DEPT表"></p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>　　换个用户登录是怎样的命令？如下命令格式，其中<code>[]</code>表示可选内容，<code>|</code>表示多选一。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONN[ECT] 用户名&#x2F;密码 [AS SYSDBA|SYSUSER]</span><br></pre></td></tr></table></figure><p>　　登录 SYS 用户看看，由于 SYS 是超级管理员用户，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONN SYS&#x2F;change_on_install AS SYSDBA</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%88%87%E6%8D%A2%E5%88%B0sys%E7%94%A8%E6%88%B7.png" alt="切换到sys用户"></p><p>　　登录 SYSTEM 用户看看，由于 SYSTEM 是普通管理员用户，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONN SYSTEM&#x2F;manager</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%88%87%E6%8D%A2%E5%88%B0system%E7%94%A8%E6%88%B7.png" alt="切换到system用户"></p><p>　　SYSTEM 用户和 SYS 用户都是管理员，应该是可以查询到 SCOTT 用户的 DEPT 表的，来试试。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPT;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E8%A1%A8%E6%88%96%E8%A7%86%E5%9B%BE%E4%B8%8D%E5%AD%98%E5%9C%A8.png" alt="表或视图不存在"></p><p>　　来确认一下当前用户是否是管理员用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW USER</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/SHOWUSER.png" alt="SHOWUSER"></p><p>　　这就奇怪了，难道不能查询到？原来，是需要在表前指定用户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SCOTT.DEPT;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/%E5%8A%A0%E7%94%A8%E6%88%B7%E5%90%8D.png" alt="加用户名"></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>　　关系型数据库的理论诞生之后，世界上出现了许多的关系型数据库管理系统，熟悉了 A 关系型数据库管理系统后几乎还得重新学 B 关系型数据库管理系统，这很大程度上是由于每个关系型数据库管理系统都实现了自己的一套语言，语言只是一种工具，弄那么多套语言毫无意义，于是，SQL（Structured Query Language，即结构化查询语言）作为一个标准和一个功能强大的关系型数据库语言诞生了。</p><p>　　SQL分为以下几类：</p><ul><li>DML（Data Manipulation Language，数据操作语言）：数据查询（SELECT)、数据更新（UPDATE、INSERT和DELETE）和事务管理等。</li><li>DDL（Data Definition Language，数据定义语言）：数据对象定义等（用户和数据表等）。</li><li>DCL（Data Control Language，数据控制语言）：授权等。</li></ul><h2 id="SCOTT-的数据表分析"><a href="#SCOTT-的数据表分析" class="headerlink" title="SCOTT 的数据表分析"></a>SCOTT 的数据表分析</h2><p>　　在 Oracle 11g 以前 SCOTT 和其数据表等是会默认给用户提供的，如果在以上安装 Oracle 11g 的步骤 13 中未勾选创建具有示例方案的数据库，我们就需要手动执行一个脚本，该脚本在如下路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\app\ql\product\11.2.0\dbhome_1\RDBMS\ADMIN\scott.sql</span><br></pre></td></tr></table></figure><h3 id="部门信息表（DEPT"><a href="#部门信息表（DEPT" class="headerlink" title="部门信息表（DEPT)"></a>部门信息表（DEPT)</h3><p>　　先切换回 SCOTT 用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONN SCOTT&#x2F;tiger</span><br></pre></td></tr></table></figure><p>　　查询 DEPT：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPT;</span><br></pre></td></tr></table></figure><p>　　查看数据表的结构的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 数据表;</span><br></pre></td></tr></table></figure><p>　　查看 DEPT 的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC DEPT;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/DEPT%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="DEPT的结构"></p><p>　　DEPT 的结构解释：</p><table><thead><tr><th>字段</th><th>含义</th><th>类型</th><th>类型作用</th><th>说明</th></tr></thead><tbody><tr><td>DEPTNO</td><td>部门编号</td><td>NUMBER(2)</td><td>最多 2 位数字</td><td></td></tr><tr><td>DNAME</td><td>部门名称</td><td>VARCHAR2(14)</td><td>最多 14 位字符</td><td>3 位字符保存中文</td></tr><tr><td>LOC</td><td>部门位置</td><td>VARCHAR2(13)</td><td>最多 13 为字符</td><td></td></tr></tbody></table><h3 id="雇员信息表（EMP）"><a href="#雇员信息表（EMP）" class="headerlink" title="雇员信息表（EMP）"></a>雇员信息表（EMP）</h3><p>　　查询 EMP：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMP;</span><br></pre></td></tr></table></figure><p>　　同样有显示问题，设置一行的长度为 150：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET LINESIZE 150</span><br></pre></td></tr></table></figure><p>　　再查询 EMP：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/EMP.png" alt="EMP"></p><p>　　查看 EMP 的结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC EMP;</span><br></pre></td></tr></table></figure><p>　　EMP 的结构解释：</p><table><thead><tr><th>字段</th><th>含义</th><th>类型</th><th>类型作用</th><th>说明</th></tr></thead><tbody><tr><td>EMPNO</td><td>雇员编号</td><td>NUMBER(4)</td><td>最多4位数字</td><td></td></tr><tr><td>ENAME</td><td>雇员姓名</td><td>VARCHAR2(10)</td><td>最多10位字符</td><td></td></tr><tr><td>JOB</td><td>雇员职位</td><td>VARCHAR2(9)</td><td>最多9位字符</td><td></td></tr><tr><td>MGR</td><td>领导编号</td><td>NUMBER(4)</td><td>最多4位数字</td><td>领导本身也是雇员</td></tr><tr><td>HIREDATE</td><td>雇佣日期</td><td>DATE</td><td></td><td>包含日期和时间</td></tr><tr><td>SAL</td><td>基本工资</td><td>NUMBER(7,2)</td><td>小数位最多2位，整数位最多5位</td><td></td></tr><tr><td>COMM</td><td>佣金</td><td>NUMBER(7,2)</td><td>小数位最多2位，整数位最多5位</td><td>只有销售职位的雇员才会存在有佣金</td></tr><tr><td>DEPTNO</td><td>部门编号</td><td>NUMBER(2)</td><td>最多2位数字</td><td>雇员所在的部门编号</td></tr></tbody></table><h3 id="工资等级表（SALGRADE）"><a href="#工资等级表（SALGRADE）" class="headerlink" title="工资等级表（SALGRADE）"></a>工资等级表（SALGRADE）</h3><p>　　查询 SALGRADE：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SALGRADE;</span><br></pre></td></tr></table></figure><p>　　查看 SALGRADE 的结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC SALGRADE;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/SALGRADE.png" alt="SALGRADE"></p><p>　　SALGRADE 的结构解释：</p><table><thead><tr><th>字段</th><th>含义</th><th>类型</th><th>类型作用</th><th>说明</th></tr></thead><tbody><tr><td>GRADE</td><td>等级编号</td><td>NUMBER</td><td></td><td></td></tr><tr><td>LOSAL</td><td>此等级的最低工资</td><td>NUMBER</td><td></td><td></td></tr><tr><td>HISAL</td><td>此等级的最高工资</td><td>NUMBER</td><td></td><td></td></tr></tbody></table><h3 id="工资表（BONUS"><a href="#工资表（BONUS" class="headerlink" title="工资表（BONUS)"></a>工资表（BONUS)</h3><p>　　BONUS 表没有数据，只有表结构。</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Oracle-Database-Learning(1)/BONUS.png" alt="BONUS"></p><p>　　BONUS 的结构解释：</p><table><thead><tr><th>字段</th><th>含义</th><th>类型</th><th>类型作用</th><th>说明</th></tr></thead><tbody><tr><td>ENAME</td><td>雇员姓名</td><td>VARCHAR2(10)</td><td>最多10位字符</td><td></td></tr><tr><td>JOB</td><td>职位</td><td>VARCHAR2(9)</td><td>最多9位字符</td><td></td></tr><tr><td>SAL</td><td>基本工资</td><td>NUMBER</td><td></td><td></td></tr><tr><td>COMM</td><td>佣金</td><td>NUMBER</td><td></td><td></td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1NJ411M7fE?p=80">【李兴华带你玩编程】Oracle 数据库小白教程（bilibili）</a></p>]]></content>
      
      
      <categories>
          
          <category> Oracle 数据库从入门到精通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 专业版 </tag>
            
            <tag> VMware® Workstation 15 Pro(15.5.0 build-14665864) </tag>
            
            <tag> Oracle Database 11g Release 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 从入门到精通（一）</title>
      <link href="2020/02/13/C-Learning(1)/"/>
      <url>2020/02/13/C-Learning(1)/</url>
      
        <content type="html"><![CDATA[<p>　　任何比 C 语言更低级的语言，都不足以完整地抽象一个计算机系统，任何比 C 语言高级的语言，都可以用 C 语言实现。C 语言不像是被发明的，它更像是被发现的，它无可替代、精妙绝伦。</p><a id="more"></a><script src="https://cdn.jsdelivr.net/npm/hls.js"></script><h2 id="C-语言的简单历史"><a href="#C-语言的简单历史" class="headerlink" title="C 语言的简单历史"></a>C 语言的简单历史</h2><p>　　C 语言是从 B 语言发展而来，B 语言是从 BCPL 发展而来，BCPL 是从 FORTRAN 发展而来。C 语言于 1972 年 11 月问世，1973 年 3 月，第三版的 Unix 上出现了 C 语言的编译器，1973 年 11 月，第四版的 Unix 发布了，这个版本是完全用 C 语言重新写的，1978 年美国电话电报公司（AT&amp;T）贝尔实验室正式发布 C 语言，1983 年美国国家标准局（American National Standards Institute，简称 ANSI）开始制定 C 语言标准，于 1989 年 12 月完成，并在 1990 年春天发布，称之为 ANSI C，有时也被称为 C89 或 C90。</p><h2 id="搭建-C-语言学习环境"><a href="#搭建-C-语言学习环境" class="headerlink" title="搭建 C 语言学习环境"></a>搭建 C 语言学习环境</h2><h3 id="安装-VMware-pro-15"><a href="#安装-VMware-pro-15" class="headerlink" title="安装 VMware pro 15"></a>安装 VMware pro 15</h3><p>　　下载<a href="https://www.52pojie.cn/thread-1026907-1-1.html">学习版</a>，安装步骤不多说了，只是有一点建议，也是我装软件的原则：能不装 C 盘就别装 C盘。</p><h3 id="下载-Ubuntu-18-04LTS-系统映像"><a href="#下载-Ubuntu-18-04LTS-系统映像" class="headerlink" title="下载 Ubuntu 18.04LTS 系统映像"></a>下载 Ubuntu 18.04LTS 系统映像</h3><h3 id="安装-Ubuntu-18-04LTS"><a href="#安装-Ubuntu-18-04LTS" class="headerlink" title="安装 Ubuntu 18.04LTS"></a>安装 Ubuntu 18.04LTS</h3><ol><li><p>VMware pro 15 安装完成后，启动，点击创建新的虚拟机；</p><p><img src="https://image.ql-isaac.cn/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="创建新的虚拟机"></p></li><li><p>选择典型，下一步；</p><p><img src="https://image.ql-isaac.cn/%E5%85%B8%E5%9E%8B.png" alt="典型"></p></li><li><p>选择稍后安装操作系统，下一步；</p><p><img src="https://image.ql-isaac.cn/%E9%80%89%E6%8B%A9%E7%A8%8D%E5%90%8E%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" alt="选择稍后安装操作系统"></p></li><li><p>客户机操作系统选择 Linux，版本选择 Ubuntu 64 位，下一步；</p><p><img src="https://image.ql-isaac.cn/%E9%80%89%E6%8B%A9%E5%AE%A2%E6%88%B7%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" alt="选择客户机操作系统"></p></li><li><p>虚拟机名称和位置自定义，下一步；</p><p><img src="https://image.ql-isaac.cn/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%8D%E7%A7%B0%E5%92%8C%E4%BD%8D%E7%BD%AE.png" alt="虚拟机名称和位置"></p></li><li><p>磁盘容量自定义。我这里就设为 60GB，下一步，完成；</p><p><img src="https://image.ql-isaac.cn/%E6%8C%87%E5%AE%9A%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F.png" alt="指定磁盘容量"></p></li><li><p>点击编辑此虚拟机，将处理器数量设为 4（一般为自己实体机处理器数量的一半）；</p><p><img src="https://image.ql-isaac.cn/%E5%A4%84%E7%90%86%E5%99%A8%E6%95%B0%E9%87%8F.png" alt="处理器数量"></p></li><li><p>点击 CD/DVD (SATA)，选择使用 ISO 映像文件，浏览，选择 Ubuntu 18.04 LTS 系统的 ISO 映像文件，确定，点击开启此虚拟机，等待；</p><p><img src="https://image.ql-isaac.cn/%E9%80%89%E6%8B%A9%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F.png" alt="选择系统镜像"></p></li><li><p>选择中文(简体)，再选择安装 Ubuntu；</p><p><img src="https://image.ql-isaac.cn/%E9%80%89%E6%8B%A9%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F.png" alt="中文简体"></p></li><li><p>继续；</p><p><img src="https://image.ql-isaac.cn/%E7%BB%A7%E7%BB%AD.png" alt="继续"></p></li><li><p>勾选最后一个，继续；</p><p><img src="https://image.ql-isaac.cn/%E5%8B%BE%E9%80%89.png" alt="勾选"></p></li><li><p>现在安装；</p><p><img src="https://image.ql-isaac.cn/%E7%8E%B0%E5%9C%A8%E5%AE%89%E8%A3%85.png" alt="现在安装"></p></li><li><p>继续；</p><p><img src="https://image.ql-isaac.cn/%E5%86%8D%E6%AC%A1%E7%A1%AE%E8%AE%A4.png" alt="再次确认"></p></li><li><p>在地图上点击，选择 shanghai，继续；</p><p><img src="https://image.ql-isaac.cn/shanghai.png" alt="shanghai"></p></li><li><p>自定义信息，继续；</p><p><img src="https://image.ql-isaac.cn/%E6%82%A8%E6%98%AF%E8%B0%81.png" alt="您是谁"></p></li><li><p>等待；</p><p><img src="https://image.ql-isaac.cn/%E7%AD%89%E5%BE%85.png" alt="等待"></p></li><li><p>现在重启；</p><p><img src="https://image.ql-isaac.cn/%E7%8E%B0%E5%9C%A8%E9%87%8D%E5%90%AF.png" alt="现在重启"></p></li><li><p>登录刚创建的用户。</p><p><img src="https://image.ql-isaac.cn/%E7%99%BB%E5%BD%95.png" alt="登录"></p></li></ol><h3 id="安装-VMware-Tools"><a href="#安装-VMware-Tools" class="headerlink" title="安装 VMware Tools"></a>安装 VMware Tools</h3><p>　　可以安装上 VMware Tools 让我们拥有最佳的 Ubuntu 18.04 LTS 操作体验，如在实体机上一般。首先点击左上方的虚拟机，再点击安装 VMware Tools，这时会在桌面出现一个 DVD，接下来具体安装过程如下：</p><p>   <img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85VMware_Tools.gif" alt="安装VMware_Tools"></p><h3 id="设置阿里镜像"><a href="#设置阿里镜像" class="headerlink" title="设置阿里镜像"></a>设置阿里镜像</h3><ol><li><p>打开软件更新器；</p><p><img src="https://image.ql-isaac.cn/%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B0%E5%99%A8.png" alt="软件更新器"></p></li><li><p>一般会有更新提示，先不更新，点击设置；</p><p><img src="https://image.ql-isaac.cn/%E8%AE%BE%E7%BD%AE.png" alt="设置"></p></li><li><p>点击 Ubuntu 软件，设置下载源；</p><p><img src="https://image.ql-isaac.cn/Ubuntu%E8%BD%AF%E4%BB%B6.png" alt="Ubuntu软件"></p></li><li><p>点击其他站点，选择阿里云镜像站点，需要输入用户密码认证；</p><p><img src="https://image.ql-isaac.cn/aliyun.png" alt="aliyun"></p></li><li><p>重新载入可用软件包列表；</p><p><img src="https://image.ql-isaac.cn/%E9%87%8D%E6%96%B0%E8%BD%BD%E5%85%A5.png" alt="重新载入"></p></li><li><p>现在和以后就可以高速安装更新或软件包了，点击立即安装；</p><p><img src="https://image.ql-isaac.cn/%E6%9B%B4%E6%96%B0.png" alt="更新"></p></li></ol><h3 id="美化自己的-Ubuntu-18-04-LTS"><a href="#美化自己的-Ubuntu-18-04-LTS" class="headerlink" title="美化自己的 Ubuntu 18.04 LTS"></a>美化自己的 Ubuntu 18.04 LTS</h3><ol><li><p>右键点击桌面，在终端打开，输入以下命令回车，输入用户密码安装 gnome-tweak-tool 软件包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure></li><li><p>火狐浏览器访问 <a href="https://extensions.gnome.org/">GNOME Shell Extensions</a>，点击安装该浏览器扩展；</p><p><img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95.png" alt="安装浏览器扩展"></p></li><li><p>刷新一下浏览器，这时会有错误信息，右键点击桌面，在终端打开，输入以下命令回车，输入用户密码安装 chrome-gnome-shell 软件包，再刷新一下浏览器，错误消失了；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/%E9%94%99%E8%AF%AF.png" alt="错误"></p></li><li><p>分别点击两个 GNOME Shell 扩展：User Themes 和Dash to Dock，将它们都开启（即安装）；</p><p><img src="https://image.ql-isaac.cn/%E4%B8%A4%E4%B8%AA%E6%89%A9%E5%B1%95.png" alt="两个扩展"></p></li><li><p>在安装完 Dash to Dock 时，你会发现侧边栏消失了，相信这是大多数人想要的效果；</p><p><img src="https://image.ql-isaac.cn/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B6%88%E5%A4%B1%E4%BA%86.png" alt="侧边栏消失了"></p></li><li><p>打开优化；</p><p><img src="https://image.ql-isaac.cn/%E4%BC%98%E5%8C%96.png" alt="优化"></p></li><li><p>打开 Dash to Dock 的设置；</p><p><img src="https://image.ql-isaac.cn/DashtoDock%E8%AE%BE%E7%BD%AE.png" alt="DashtoDock设置"></p></li><li><p>打开智能隐藏的设置；</p><p><img src="https://image.ql-isaac.cn/%E6%99%BA%E8%83%BD%E9%9A%90%E8%97%8F%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="智能隐藏的设置"></p></li><li><p>勾选在全屏状态下启用，不勾选推压以显示……，调整显示超时时间为 0.2 秒，关闭窗口，此时，再打开火狐浏览器，当把鼠标移动到左侧，侧边栏自动显示，移走鼠标，侧边栏自动隐藏，相信这同样是大多数人想要的效果；</p><p><img src="https://image.ql-isaac.cn/%E8%AE%BE%E7%BD%AE%E5%92%8C%E8%B0%83%E6%95%B4.png" alt="设置和调整"></p><p><img src="https://image.ql-isaac.cn/%E6%99%BA%E8%83%BD%E9%9A%90%E8%97%8F.gif" alt="智能隐藏"></p></li><li><p>打开火狐浏览器，进入<a href="https://www.gnome-look.org/p/1275087/">该网址</a>下载 McMojave 主题，等待，确定；</p><p><img src="https://image.ql-isaac.cn/%E4%B8%8B%E8%BD%BD%E4%B8%BB%E9%A2%98.png" alt="下载主题"></p></li><li><p>提取到下载中，点击显示文件；</p><p><img src="https://image.ql-isaac.cn/%E6%8F%90%E5%8F%96.png" alt="提取"></p></li><li><p>右键，在终端打开；</p><p><img src="https://image.ql-isaac.cn/%E5%8F%B3%E9%94%AE.png" alt="右键"></p></li><li><p>输入以下命令回车，输入用户密码，移动 Mojave-light 目录；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv Mojave-light/ /usr/share/themes/</span><br></pre></td></tr></table></figure></li><li><p>打开优化，选择Mojave-light主题，就能看到效果了；</p><p><img src="https://image.ql-isaac.cn/%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98.gif" alt="更换主题"></p></li><li><p><a href="https://www.gnome-look.org/p/1305429/">进入该网址</a>，下载 McMojave-circle 图标，等待，确定；</p><p><img src="https://image.ql-isaac.cn/%E4%B8%8B%E8%BD%BD%E5%9B%BE%E6%A0%87.png" alt="下载图标"></p></li><li><p>同上，提取到下载中，点击显示文件，右键，在终端打开，输入以下命令回车，输入用户密码，移动 McMojave-circle 目录；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv McMojave-circle/ /usr/share/icons/</span><br></pre></td></tr></table></figure></li><li><p>打开优化，选择 McMojave-circle 图标，就能看到效果了；</p><p><img src="https://image.ql-isaac.cn/%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87.gif" alt="更换图标"></p></li><li><p>有一个地方忘记了，打开优化，选择shell为 Mojave-light；</p><p><img src="https://image.ql-isaac.cn/%E6%9B%B4%E6%8D%A2shell.gif" alt="更换shell"></p></li><li><p>可以在 Dash to Dock 设置中设置侧边栏的位置在底部；</p><p><img src="https://image.ql-isaac.cn/%E8%AE%BE%E7%BD%AE%E5%9C%A8%E5%BA%95%E9%83%A8.png" alt="设置在底部"></p></li><li><p>最后，在优化-&gt;窗口中，设置标题栏按钮在左边，右键桌面更换个壁纸，至此，美化算是告一段落了。</p></li></ol><p><video id="video1" preload controls loop style="height: 100%;width: 100%;object-fit: cover;"></video></p><script>  if (Hls.isSupported()) {    var video1 = document.getElementById('video1');    var hls = new Hls();    hls.loadSource('https://cdn.jsdelivr.net/gh/ql-isaac/post-videos-1/美化/美化.m3u8');    hls.attachMedia(video1);    hls.on(Hls.Events.MANIFEST_PARSED,function() {      video.play();  });  }</script><h3 id="安装-build-essential-软件包和-Vim-文本编辑器"><a href="#安装-build-essential-软件包和-Vim-文本编辑器" class="headerlink" title="安装 build-essential 软件包和 Vim 文本编辑器"></a>安装 build-essential 软件包和 Vim 文本编辑器</h3><p>　　右键点击桌面，在终端打开，输入以下命令回车，输入用户密码安装 build-essential 软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p>　　再输入以下命令回车，输入用户密码安装Vim文本编辑器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>　　如何注释应该是我们学习任何一门编程语言最先需要知道的，C 语言中有两种注释方式：</p><ul><li>以<code>/*</code>开始<code>*/</code>结束的块注释（block comment）；</li><li>以<code>//</code>开始换行符结束的单行注释（line comment）；</li></ul><h2 id="C-语言学习起步"><a href="#C-语言学习起步" class="headerlink" title="C 语言学习起步"></a>C 语言学习起步</h2><p>　　右键点击桌面，新建一个学习文件夹 C Learning，点开，再新建文件夹（一），再点开，再新建文件夹 20200404 ，再点开，右键，在终端打开。</p><p><img src="https://image.ql-isaac.cn/20200404.png" alt="20200404"></p><h3 id="新建-hello-world-c-源文件、用-Vim-编辑并保存"><a href="#新建-hello-world-c-源文件、用-Vim-编辑并保存" class="headerlink" title="新建 hello_world.c 源文件、用 Vim 编辑并保存"></a>新建 hello_world.c 源文件、用 Vim 编辑并保存</h3><p>　　输入以下命令新建 hello_world.c 源文件并用 Vim 打开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello_world.c</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/hello_world.c.png" alt="hello_world.c"></p><p>　　按下 i 键进入插入模式，国际惯例，编写第一个程序：打印”Hello,World!“：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!\n&quot;</span>); <span class="comment">//print是打印的意思，f是format的简写，printf()函数的功能就是格式化输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　按下 ESC 键进入一般模式，再按”SHIFT+;“（即输入英文的分号）进入命令模式，输入 wq 命令（write and quit），这样源文件就保存了。</p><p><img src="https://image.ql-isaac.cn/%E4%BF%9D%E5%AD%98.gif" alt="保存"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>　　之后就是编译，输入以下命令回车执行（小技巧：打 hello_world.c 时，可以只打 h 再按 TAB 键，系统能自动匹配）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello_world.c</span><br></pre></td></tr></table></figure><p>　　输入以上命令后没有任何提示，别慌，这是正常的，在 Linux 中，没有消息就是好消息。可以输入以下命令(<code>ls -alF *</code>的别名）列出当前目录下有哪些文件和目录，./指的是当前目录，../指的是上一级目录，hello_world.c 是刚刚保存的 C 源文件，那这个“a.out*”是什么呢？没错，就是刚刚编译出来的可执行文件（ 星号表示该文件为可执行文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/a.out.png" alt="a.out"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>　　有了可执行文件，就可以运行了，输入以下命令执行就能打印出“Hello,World!”了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C.png" alt="打印结果"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>　　以上就是 C 学习的起步内容，下面就开始正式的学习，会总是需要用到上面提到的新建并编辑保存、编译和运行的相关命令，还有一个小技巧，可以使用键盘的方向键上和下在历史命令中切换。</p><h2 id="做点计算"><a href="#做点计算" class="headerlink" title="做点计算"></a>做点计算</h2><p>　　范例：做点计算（新建 compute.c）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;12+34=%d\n&quot;</span>,<span class="number">12</span>+<span class="number">34</span>); <span class="comment">//%d 为占位符，表示数据打印出来的格式应该是十进制整数的格式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12+34&#x3D;46</span><br></pre></td></tr></table></figure><p>　　除了做加法，当然还能做其他运算：</p><table><thead><tr><th>运算</th><th>运算符</th></tr></thead><tbody><tr><td>加</td><td>+</td></tr><tr><td>减</td><td>-</td></tr><tr><td>乘</td><td>*</td></tr><tr><td>除</td><td>/</td></tr><tr><td>取余数</td><td>%</td></tr><tr><td>括号</td><td>()</td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>　　C 语言是一种强类型的语言，所有的变量都必须有类型。</p><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>　　变量定义的一般形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型名称&gt; &lt;变量名称&gt;;</span><br></pre></td></tr></table></figure><p>　　范例：定义变量 price，存放价格的 int 型数据，定义变量 payment，存放支付金额的 int 型数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">int</span> payment;</span><br></pre></td></tr></table></figure><p>　　或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> price,payment; <span class="comment">//可以在一行中定义多个同类型的变量，有逗号分隔</span></span><br></pre></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>　　标识符只能由字母、数字和下划线组成，数字不能出现在第一个字符的位置，标识符分为关键字，预定义标识符和用户自定义标识符，变量名称就属于用户自定义标识符。</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>　　赋值也是一种运算，运算符为<code>=</code>，表示将右边的值复制一份赋给左边的变量，那么，这和数学中的等于号是一样的吗？当然不是，数学中的等于号表示的是相等的关系，C 语言也有表示相等关系的运算符，即<code>==</code>。</p><p>　　范例：使用赋值运算符初始化变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int price&#x3D;56;</span><br><span class="line">int payment&#x3D;100;</span><br></pre></td></tr></table></figure><p>　　或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int price;</span><br><span class="line">int payment;</span><br><span class="line">price&#x3D;56;</span><br><span class="line">payment&#x3D;100;</span><br></pre></td></tr></table></figure><p>　　或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int price&#x3D;56,payment&#x3D;100; </span><br></pre></td></tr></table></figure><h3 id="用scanf-函数初始化变量"><a href="#用scanf-函数初始化变量" class="headerlink" title="用scanf()函数初始化变量"></a>用scanf()函数初始化变量</h3><p>　　范例：定义 price 和 payment 并用 scanf() 函数初始化它们</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> price,payment;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入该商品价格（元）：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;price); <span class="comment">//scan 是扫描的意思，f 同样是 format 的简写，scanf() 函数的功能就是格式化扫描,扫描什么？扫描字符呗，以回车为结束符（不计入输入中）将输入的字符以十进制整数的格式解析，&amp;price 的意思就是将解析出来的值复制一份赋给 price</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入支付的金额（元）：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;payment); <span class="comment">//同上</span></span><br></pre></td></tr></table></figure><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p>　　范例：找零（新建 change.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> payment;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入该商品价格（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;price); <span class="comment">//键盘输入的方式初始化 price</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入支付的金额（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;payment); <span class="comment">//键盘输入的方式初始化 payment</span></span><br><span class="line">    <span class="keyword">int</span> change=payment-price;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找零（元）：%d\n&quot;</span>,change);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行结果：</p><p><img src="https://image.ql-isaac.cn/change.c.gif" alt="change.c"></p><h3 id="没有初始化变量的后果"><a href="#没有初始化变量的后果" class="headerlink" title="没有初始化变量的后果"></a>没有初始化变量的后果</h3><p>　　范例：没有初始化 payment（修改 change.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> payment;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入该商品价格（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;price); <span class="comment">//键盘输入的方式初始化 price</span></span><br><span class="line">    <span class="keyword">int</span> change=payment-price;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找零（元）：%d\n&quot;</span>,change);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行结果：</p><p><img src="https://image.ql-isaac.cn/%E6%B2%A1%E6%9C%89%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F.gif" alt="没有初始化变量"></p><p>　　什么！找零 2 亿多？？！！原来，变量在没有初始化，也就是刚一定义时，其实就是有值的，可是这个值只有计算机知道，在发生意想不到的问题之前，我们应该时刻注意变量在定义后一定要初始化。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><p>　　变量定义的一般形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &lt;类型名称&gt; &lt;常量名称&gt;; <span class="comment">//const 是一个修饰符，是 constant（常数）的简写，规定常量名称中的字母都为大写，这是命名规范</span></span><br></pre></td></tr></table></figure><h3 id="常量和变量的相同点和不同点"><a href="#常量和变量的相同点和不同点" class="headerlink" title="常量和变量的相同点和不同点"></a>常量和变量的相同点和不同点</h3><p>　　相同点：常量和变量都需要初始化。</p><p>　　不同点：常量在初始化后不能再被修改而变量可以。</p><h3 id="常量的使用"><a href="#常量的使用" class="headerlink" title="常量的使用"></a>常量的使用</h3><p>　　在找零程序中，该商品，比如说一本书，它的价格就是 56 元，没必要总是输入 56，于是我们可以这么写：</p><p>　　范例：使用常量（修改 change.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> PRICE=<span class="number">56</span>;</span><br><span class="line">    <span class="keyword">int</span> payment;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入支付的金额（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;payment); <span class="comment">//键盘输入的方式初始化 payment</span></span><br><span class="line">    <span class="keyword">int</span> change=payment-PRICE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找零（元）：%d\n&quot;</span>,change);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　如果我们尝试去修改 PRICE 会如何？来试一下：</p><p>　　范例：尝试修改 PRICE（修改 change.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> PRICE=<span class="number">56</span>;</span><br><span class="line">    <span class="keyword">int</span> payment;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入该商品价格（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;PRICE); <span class="comment">//尝试修改 PRICE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入支付的金额（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;payment); <span class="comment">//键盘输入的方式初始化 payment</span></span><br><span class="line">    <span class="keyword">int</span> change=payment-PRICE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找零（元）：%d\n&quot;</span>,change);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行结果：</p><p><img src="https://image.ql-isaac.cn/%E5%B0%9D%E8%AF%95%E4%BF%AE%E6%94%B9PRICE.gif" alt="尝试修改PRICE"></p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>　　美国人习惯用几英尺几英寸的方式描述自己的身高，如果遇到一个美国人告诉你他的身高为 5 英尺 7 英寸，他的身高应该是一米几呢？由于 1 英尺 = 12 英寸 = 0.3048 米，所以 5 英尺 7 英寸应该为 (5+7/12)*0.3048 米，即 1.7018 米。来写个程序：</p><p>　　范例：长度换算（新建 length_conversion.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请分别输入身高的英尺和英寸，如5,7表示5英尺7英寸:&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> foot; <span class="comment">//英尺</span></span><br><span class="line">    <span class="keyword">int</span> inch; <span class="comment">//英寸</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;foot,&amp;inch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;身高是%f米\n&quot;</span>,((foot+inch/<span class="number">12</span>)*<span class="number">0.3048</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行结果：</p><p><img src="https://image.ql-isaac.cn/%E9%95%BF%E5%BA%A6%E6%8D%A2%E7%AE%97.gif" alt="长度换算"></p><p>　　英尺似乎没发挥作用？这是怎么回事？原来，是由于 C 语言中相同数据类型的变量的计算结果仍然是该类型，inch 是 int 类型，12 是整形常量，默认是 int 类型，那么对于这个值永远都是在 0 到 11范 围的 inch 来说，其与 12 的除法运算永远都是 int 类型，永远都会直接舍弃掉小数点后面的数据，永远都为 0，所以才会有以上的运行结果。</p><p>　　那么，以上程序该如何改进呢？这里，又紧接着引入一个知识点：在 C 语言中不同数据类型的变量的运算，是先将所有变量统一转化为一种表示范围最大的数据类型。</p><p>　　范例：长度换算（改）（修改 length_conversion.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请分别输入身高的英尺和英寸，如5,7表示5英尺7英寸:&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> foot; <span class="comment">//英尺</span></span><br><span class="line">    <span class="keyword">int</span> inch; <span class="comment">//英寸</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;foot,&amp;inch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;身高是%f米\n&quot;</span>,((foot+inch/<span class="number">12.0</span>)*<span class="number">0.3048</span>)); <span class="comment">//12 是整形常量，默认是 int 类型，12.0 是浮点型常量，默认是 double 类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行结果：</p><p><img src="https://image.ql-isaac.cn/%E9%95%BF%E5%BA%A6%E6%8D%A2%E7%AE%97%EF%BC%88%E6%94%B9%EF%BC%89.gif" alt="长度换算（改）"></p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>　　一个表达式是一系列运算符和算子的组合，用来计算出一个值。运算符（operator）是指进行运算的动作，比如加法运算符”+“，减法运算符”-“，算子（operand）是指参与运算的值，这个值可能是常数、变量和方法返回值等。</p><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="https://www.bilibili.com/video/BV19W411B7w1">翁凯C语言（bilibili）</a></p><p><a href="https://www.bilibili.com/video/BV17s411N78s">【C语言】《带你学C带你飞》（bilibili）</a></p>]]></content>
      
      
      <categories>
          
          <category> C 从入门到精通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware® Workstation 15 Pro(15.5.0 build-14665864) </tag>
            
            <tag> Ubuntu 18.04 LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 从入门到实践（二）</title>
      <link href="2020/02/10/Python-Learning(2)/"/>
      <url>2020/02/10/Python-Learning(2)/</url>
      
        <content type="html"><![CDATA[<p>　　《Python 从入门到实践（一）》是 Python 初级部分的学习笔记，主要是一些基础方面的内容，本篇就为 Python 高级部分的学习笔记，主要是一些面向对象方面的内容。</p><a id="more"></a><h2 id="搭建实践环境"><a href="#搭建实践环境" class="headerlink" title="搭建实践环境"></a>搭建实践环境</h2><p>　　<a href="https://www.jetbrains.com/pycharm/download/">下载最流行的最新版的 Python 开发软件 PyCharm</a>，建议下载专业版，但是是收费的，如果你和我一样是用来学习的，可以在网上寻找方法免费使用。</p><ol><li>下载好安装程序后直接双击运行，Next；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%8F%8C%E5%87%BB%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F.png" alt="双击运行程序"></p><ol start="2"><li>设置安装路径：将 C 改为 D，Next；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E8%AE%BE%E7%BD%AE%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.png" alt="设置安装路径"></p><ol start="3"><li>勾选如图这两个选项，Next；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%8B%BE%E9%80%89.png" alt="勾选"></p><ol start="4"><li>Install;</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/Install.png" alt="Install"></p><ol start="5"><li>勾选，Finish；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/Finish.png" alt="Finish"></p><ol start="6"><li>不导入设定，直接点 OK;</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/OK.png" alt="OK"></p><ol start="7"><li>勾选，Continue；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%90%8C%E6%84%8F.png" alt="同意"></p><ol start="8"><li>Don’t sent；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%90%A6.png" alt="否"></p><ol start="9"><li>勾选明亮主题，选择左边的，点击；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/Light.png" alt="Light"></p><ol start="10"><li>需要学习化，如何学习化这里就不多说了；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%BF%80%E6%B4%BB.png" alt="激活"></p><ol start="11"><li>学习化完成，创建新项目，点击 Create New Project；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%88%9B%E5%BB%BA.png" alt="创建"></p><ol start="12"><li>新建一个学习文件夹，点击 Browse，找到新建的文件夹，确定；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/Create.png" alt="Create"></p><ol start="13"><li>进行一些设置，点击 files，点击 Settings，在搜索框中搜索 font，按自己喜好设置字体和字体属性，我这里就仅仅将字体尺寸设大点吧，设为 20，确定；</li></ol><p><img src="https://image.ql-isaac.cn/Python-Learning%EF%BC%88%E4%BA%8C%EF%BC%89/font.png" alt="font"></p>]]></content>
      
      
      <categories>
          
          <category> Python 从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
            <tag> Pycharm </tag>
            
            <tag> Python v3.8.1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 从入门到实践（一）</title>
      <link href="2020/02/06/Java-Learning(1)/"/>
      <url>2020/02/06/Java-Learning(1)/</url>
      
        <content type="html"><![CDATA[<p>　　Java——面向对象编程语言的领军者！</p><a id="more"></a><h2 id="搭建-Java-学习环境"><a href="#搭建-Java-学习环境" class="headerlink" title="搭建 Java 学习环境"></a>搭建 Java 学习环境</h2><h3 id="安装-VMware-pro-15"><a href="#安装-VMware-pro-15" class="headerlink" title="安装 VMware pro 15"></a>安装 VMware pro 15</h3><p>　　下载<a href="https://www.52pojie.cn/thread-1026907-1-1.html">学习版</a>，安装步骤不多说了，只是有一点建议，也是我装软件的原则：能不装 C 盘就别装 C 盘。</p><h3 id="安装-Windows-10"><a href="#安装-Windows-10" class="headerlink" title="安装 Windows 10"></a>安装 Windows 10</h3><p>　　我在网上找到一个<a href="https://www.cnblogs.com/gxhunter/p/10290748.html">精简版的 Windows 10 系统</a>，有介绍和下载方式，这回就用这个精简版的镜像。由于是安装 Windows 系统，具体如何安装这里就不再多说了。</p><h3 id="安装-JDK-9-0-4"><a href="#安装-JDK-9-0-4" class="headerlink" title="安装 JDK 9.0.4"></a>安装 JDK 9.0.4</h3><p>　　<a href="https://pan.baidu.com/s/1R0Y6nDqlYxKvelV3dAtekQ">下载 JDK 9.0.4</a>，提取码：ua1e，下好后安装，安装路径可以自定义，公共 JRE 可装可不装，如下图，我这次装一装。</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Java-Learning(1)/%E5%AE%89%E8%A3%85.png" alt="安装"></p><h3 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h3><p>　　右键此电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量，点击下方的新建，变量名填写 JAVA_HOME，变量值就是安装 JDK 9.0.4 时设置的路径，确定。</p><p>　　如下图，在系统变量栏中找到 Path 变量，点击编辑，点击新建，键入 %JAVA_HOME%\bin，确定。运行 CMD，键入 java，发现系统识别了 java 命令。</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Java-Learning(1)/Path.png" alt="Path"></p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><h2 id="类集框架"><a href="#类集框架" class="headerlink" title="类集框架"></a>类集框架</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1Lf4y1U7Cz?p=9">黑马Java零基础入门到就业_Java基础(IDEA版本)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK 9.0.4 </tag>
            
            <tag> Windows 10 专业版 </tag>
            
            <tag> VMware® Workstation 15 Pro(15.5.0 build-14665864) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 从入门到实践（一）</title>
      <link href="2020/02/03/Linux-Learning(1)/"/>
      <url>2020/02/03/Linux-Learning(1)/</url>
      
        <content type="html"><![CDATA[<p>　　操作系统作为软件的软件，实在是重中之重。</p><a id="more"></a><h2 id="搭建-Linux-学习环境"><a href="#搭建-Linux-学习环境" class="headerlink" title="搭建 Linux 学习环境"></a>搭建 Linux 学习环境</h2><h3 id="安装-VMware-pro-15"><a href="#安装-VMware-pro-15" class="headerlink" title="安装 VMware pro 15"></a>安装 VMware pro 15</h3><p>　　下载<a href="https://www.52pojie.cn/thread-1026907-1-1.html">学习版</a>，安装步骤不多说了，只是有一点建议，也是我装软件的原则：能不装C盘就别装C盘。</p><h3 id="下载-CentOS-7-7-1908-系统映像"><a href="#下载-CentOS-7-7-1908-系统映像" class="headerlink" title="下载 CentOS 7.7(1908) 系统映像"></a><a href="http://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/">下载 CentOS 7.7(1908) 系统映像</a></h3><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Linux-Learning(1)/%E4%B8%8B%E8%BD%BD%E7%AC%AC%E4%B8%89%E4%B8%AA.png" alt="下载第三个"></p><h3 id="安装CentOS-7-7-1908"><a href="#安装CentOS-7-7-1908" class="headerlink" title="安装CentOS 7.7(1908)"></a>安装CentOS 7.7(1908)</h3><ol><li>VMware pro 15安装完成后，启动，点击创建新的虚拟机；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/Linux-Learning(1)/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="创建新的虚拟机"></p><p>2. </p>]]></content>
      
      
      <categories>
          
          <category> Linux 从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware® Workstation 15 Pro(15.5.0 build-14665864) </tag>
            
            <tag> CentOS 7.7(1908) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 从入门到实践（一）</title>
      <link href="2020/01/27/Python-Learning(1)/"/>
      <url>2020/01/27/Python-Learning(1)/</url>
      
        <content type="html"><![CDATA[<p>　　在当今的环境下 Python 逐渐成为一门热门的语言，作为一门有着 30 年发展历史的编程语言，其在数据分析领域以及人工智能领域发挥着重要作用。Python 是基于 C 语言，一诞生就具备了完善的语法，其给程序员最直观的印象是——它的简洁性。</p><a id="more"></a><h2 id="Python特点"><a href="#Python特点" class="headerlink" title="Python特点"></a>Python特点</h2><ol><li>语法简单灵活；</li><li>规范化代码；</li><li>Python 是一个开源项目，有着广泛的开发支持；</li><li>Python 是一门面向对象的编程语言；</li><li>Python 具有强大的可移植性；</li><li>Python 属于解释性的编程语言；</li><li>Python 是一个“胶水语言”；</li><li>Python 拥有良好的并发处理支持。</li></ol><h2 id="搭建-Python-学习环境"><a href="#搭建-Python-学习环境" class="headerlink" title="搭建 Python 学习环境"></a>搭建 Python 学习环境</h2><p>　　前往<a href="https://www.python.org/"> Python 官网</a>下载最新版 Python，需要说明的是，Python2.x 和 Python3.x 之间存在较大差异，在开发中一般都使用 Python3.x，本次使用的版本为 3.8.1。</p><p><img src="https://image.ql-isaac.cn/%E6%9C%80%E6%96%B0%E7%89%88Python%E4%B8%8B%E8%BD%BD.png" alt="最新版Python下载"></p><p>　　下载完成后运行安装程序，勾选 Add Python 3.8 to PATH，点击 Customize installation，点击 Next，点击 Install，等待安装完成。按下 Windows+R 组合键，输入 CMD 进入命令行窗口，输入 python，发现可进入 Python 交互式环境，如下图。</p><p><img src="https://image.ql-isaac.cn/Python%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%8E%AF%E5%A2%83.png" alt="Python交互式环境"></p><p>　　文本编辑器到底哪家强？我推荐 Visual Studio Code。<a href="https://code.visualstudio.com/">前往官网</a>，点击Download for Windows，下载完成后运行安装程序，下一步即可，但建议到下图这一步时勾选上这三个选项，等待安装完成。安装完成后进入 Visual Studio Code，点击左边第五个图标，搜索 chinese，如下图，点击 Install 安装简体中文包，安装完成后点击 Restart Now，仍然点击左边第五个图标，搜索 python，点击第一个，安装。</p><p><img src="https://image.ql-isaac.cn/Visual-Studio-Code-%E5%8B%BE%E9%80%89.png" alt="勾选"></p><p><img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E5%8C%85.png" alt="安装简体中文包"></p><h2 id="Python-学习起步"><a href="#Python-学习起步" class="headerlink" title="Python 学习起步"></a>Python 学习起步</h2><p>　　虽然 Python 拥有交互式环境，但是无论如何，程序是需要定义在源文件之中的，Python 源文件的后缀为 py。</p><p>　　新建一个学习文件夹，打开 Visual Studio Code，打开文件夹，如下图，选择学习文件夹（也可以直接右键学习文件夹，选择通过Code 打开），再新建文件夹，命名为 20200203（以当天的年月日命名），在该文件夹下新建文件，命名为 hello_world.py，文件中输入以下一行代码，Ctrl+S 保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;Hello,world!&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="打开文件夹"></p><p>　　点击右上角运行图标，可看到学习任何一个编程语言第一个程序的运行结果，如下图。</p><p><img src="https://image.ql-isaac.cn/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F.png" alt="第一个程序"></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释：<code># [注释内容]</code></li><li>多行注释：<code>&#39;&#39;&#39;[多行注释内容]&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;[多行注释内容]&quot;&quot;&quot;</code></li></ul><h2 id="变量（对象）"><a href="#变量（对象）" class="headerlink" title="变量（对象）"></a>变量（对象）</h2><p>　　Python 中的变量不需要声明，每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>　　范例：使用变量（修改文件 hello_world.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line">print(message)</span><br><span class="line">message = <span class="string">&quot;Hello,ql!&quot;</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!</span><br><span class="line">Hello,ql!</span><br></pre></td></tr></table></figure><p>　　可以同时为多个变量赋值。</p><p>　　范例：为多个变量赋值（修改文件 hello_world.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message1, message2 = <span class="string">&quot;Hello,world!&quot;</span>, <span class="string">&quot;Hello,ql!&quot;</span></span><br><span class="line">print(message1)</span><br><span class="line">print(message2)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!</span><br><span class="line">Hello,ql!</span><br></pre></td></tr></table></figure><p>　　值得说明的是，如果我们比较熟悉面向对象的编程的话，Python 语言里面所有的变量严格意义上来讲应该被称为“对象”；</p><p>　　范例：定义变量但是不设置内容(新建文件 None.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="literal">None</span> <span class="comment"># 空引用</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure><p>　　很多编程语言都会使用<code>;</code>作为每行程序的完结符，然而<code>;</code>在 Python 中被设计为可选符号，如果希望在一行定义多个变量，可用<code>;</code>。</p><p>　　范例：使用<code>;</code>对一行中的多个变量进行区分（新建文件 hello_ql.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello,world&quot;</span> ;print(message) ;message = <span class="string">&quot;Hello,ql!&quot;</span> ;print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!</span><br><span class="line">Hello,ql!</span><br></pre></td></tr></table></figure><p>　　和其他语言一样，Python 中，我们在命名变量时也需要遵守一些规则和指南，违反规则将导致错误，遵守指南让你编写的代码更容易阅读和理解：</p><ul><li>变量名只能包含字母、数字和下划线。变量名可以以字母或下划线开头但不能以数字开头；</li><li>变量名不能包含空格，但可用下划线代替；</li><li>不要将 Python 关键字用做变量名，注意将 Python 内置函数用做变量名时，虽然不会导致错误但将覆盖这些函数；</li><li>变量名应即简短又具有描述性。例如：name 比 n 好，student_name 比 s_n 好，name_length 比 length_of_persons_name;</li><li>慎用小写字母i和大写字母 O，因为它们可能被人错看成数字 1 和 0。</li></ul><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><p>　　在 Python 之中常用的数据类型包括：整数、浮点数、复数、布尔、字符串、列表、元组、字典和日期。</p><p>　　范例：通过 type() 函数查看数据类型(新建文件 type.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line">print(type(message))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><p>　　“&lt;class ‘str’&gt;”表示 message 变量为字符串类型。</p><h3 id="整数和浮点数"><a href="#整数和浮点数" class="headerlink" title="整数和浮点数"></a>整数和浮点数</h3><p>　　范例：两个整数相除（新建文件 num.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">10</span></span><br><span class="line">num_b = <span class="number">4</span></span><br><span class="line">print(num_a/num_b)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.5</span></span><br></pre></td></tr></table></figure><p>　　范例：获取数据类型（修改文件 num.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">10</span></span><br><span class="line">num_b = <span class="number">4</span></span><br><span class="line">print(num_a/num_b)</span><br><span class="line">print(type(num_a))</span><br><span class="line">print(type(num_b))</span><br><span class="line">print(type(num_a/num_b))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>　　复数数据类型不能直接使用，需要通过 complex() 函数。</p><p>　　范例：使用复数（一）（新建文件 complex.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = complex(<span class="number">10</span>,<span class="number">2</span>) <span class="comment"># 实部为 10，虚部为 2</span></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(10+2j)</span><br></pre></td></tr></table></figure><p>　　范例：使用复数（二）（修改文件 complex.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = complex(<span class="number">10</span>,<span class="number">2</span>) <span class="comment"># 实部为 10，虚部为 2</span></span><br><span class="line">print(num)</span><br><span class="line">print(num.real) <span class="comment"># 获取实部</span></span><br><span class="line">print(num.imag) <span class="comment"># 获取虚部</span></span><br><span class="line">print(num.conjugate()) <span class="comment"># 获取共轭复数</span></span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(10+2j)</span><br><span class="line">10.0</span><br><span class="line">2.0</span><br><span class="line">(10-2j)</span><br></pre></td></tr></table></figure><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><p>　　“布尔”是 19 世纪一位英国数学家的名字，Python 中布尔的取值：<code>True</code>和<code>False</code>。</p><p>　　范例：使用布尔（一）（新建文件 boolean.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span> <span class="comment"># Python 中的 True 是首字母大写的</span></span><br><span class="line"><span class="keyword">if</span> flag: <span class="comment"># 分支语句</span></span><br><span class="line">        print(<span class="string">&quot;Hello,world!&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!</span><br></pre></td></tr></table></figure><p>　　Python 是通过 C 语言开发的，Python 继承了布尔型值为 0 表示假，为非 0 表示真的特性。</p><p>　　范例：使用布尔（二）（修改文件 boolean.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="number">1</span> <span class="comment"># 非 0</span></span><br><span class="line"><span class="keyword">if</span> flag: <span class="comment"># 分支语句</span></span><br><span class="line">        print(<span class="string">&quot;Hello,world!&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>　　字符串是一个开发中最为重要的的概念，Python 中直接使用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>进行字符串的定义，使用哪一种引号定义字符串都是一样的，但需统一，不同的引号可以嵌套。</p><p>　　范例：引号嵌套（新建文件 quotation_mark.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&#x27;&quot;Hello,world!&quot;&#x27;</span> <span class="comment"># 使用单引号定义字符串</span></span><br><span class="line">print(message)</span><br><span class="line">message = <span class="string">&quot;&#x27;Hello,ql!&#x27;&quot;</span> <span class="comment"># 使用双引号定义字符串</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello,world!&quot;</span><br><span class="line">&#39;Hello,ql!&#39;</span><br></pre></td></tr></table></figure><p>　　可使用<code>+</code>进行字符串的拼接操作。</p><p>　　范例：字符串的拼接（新建文件 string.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello,world!,&quot;</span>+<span class="string">&quot;Hello,ql!&quot;</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!,Hello,ql!</span><br></pre></td></tr></table></figure><h4 id="常用转义字符串"><a href="#常用转义字符串" class="headerlink" title="常用转义字符串"></a>常用转义字符串</h4><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="center">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">续航符，实现字符串多行定义</td><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\\</td><td align="center">等价于“\”</td><td align="center">\v</td><td align="center">纵向制表符</td></tr><tr><td align="center">\&#39;</td><td align="center">等价于单引号</td><td align="center">\t</td><td align="center">横向制表符</td></tr><tr><td align="center">\“</td><td align="center">等价于双引号</td><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\000</td><td align="center">空字符串</td><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\b</td><td align="center">退格</td><td align="center">\oyy</td><td align="center">八进制字符，如“\o12:”为换行</td></tr><tr><td align="center">\e</td><td align="center">转义</td><td align="center">\xyy</td><td align="center">十进制字符，如“\x0a”为换行</td></tr></tbody></table><p>　　范例：使用转义字符串（新建文件 escape.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Python:\&quot;Hello,world!\&quot;\n\tPython:\&quot;Hello,ql!\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Python:&quot;Hello,world!&quot;</span><br><span class="line">        Python:&quot;Hello,ql!&quot;</span><br></pre></td></tr></table></figure><h3 id="函数input"><a href="#函数input" class="headerlink" title="函数input()"></a>函数input()</h3><p>　　利用函数 input()，Python 可以接受通过键盘输入的字符串类型的数据</p><p>　　范例：通过键盘输入数据（新建文件 input.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_data = input(<span class="string">&quot;你的名字：&quot;</span>) <span class="comment"># 给出提示字符串</span></span><br><span class="line">print(<span class="string">&quot;Python:Hello,&quot;</span>+input_data+<span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你的名字：ql</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你的名字：ql</span><br><span class="line">Python:Hello,ql!</span><br></pre></td></tr></table></figure><p>　　范例：获取输入类型（修改文件 input.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input_data = input(<span class="string">&quot;你的名字：&quot;</span>) <span class="comment"># 给出提示字符串</span></span><br><span class="line">print(<span class="string">&quot;Python:Hello,&quot;</span>+input_data+<span class="string">&quot;!&quot;</span>)</span><br><span class="line">print(type(input_data))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你的名字：ql</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你的名字：ql</span><br><span class="line">Python:Hello,ql!</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><h3 id="数据类型转换函数"><a href="#数据类型转换函数" class="headerlink" title="数据类型转换函数"></a>数据类型转换函数</h3><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">int（数据）</td><td align="center">将指定数据转为整形数据</td></tr><tr><td align="center">float（数据）</td><td align="center">将指定数据转为浮点型数据</td></tr><tr><td align="center">bool（数据）</td><td align="center">将指定数据转为布尔型数据</td></tr><tr><td align="center">str（数据）</td><td align="center">将指定数据转为字符串型数据</td></tr></tbody></table><p>　　范例：int() 函数（一）（新建文件 int.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;155&quot;</span></span><br><span class="line">temp = int(str)</span><br><span class="line">print(temp)</span><br><span class="line">print(type(temp))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">155</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br></pre></td></tr></table></figure><p>　　如果字符串不是由规定字符组成，int.py 就会产生异常。</p><p>　　范例：字符串不是由规定字符组成（修改文件 int.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;2BC9&quot;</span></span><br><span class="line">temp = int(str)</span><br><span class="line">print(temp)</span><br><span class="line">print(type(temp))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:&#x2F;Python Learning&#x2F;20200205&#x2F;int.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    temp &#x3D; int(str)</span><br><span class="line">ValueError: invalid literal for int() with base 10: &#39;2BC9&#39;</span><br></pre></td></tr></table></figure><p>　　范例：int() 函数（二）（修改文件 int.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;199&quot;</span></span><br><span class="line">num_f = <span class="string">&quot;199.6&quot;</span></span><br><span class="line">num_bol = <span class="literal">True</span> <span class="comment"># True 转为整形数据 1</span></span><br><span class="line">result = int(str) + int(num_f) + int(num_bol)</span><br><span class="line">print(result)</span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">399</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br></pre></td></tr></table></figure><p>　　范例：int() 函数（三）（修改文件 int.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_a = int(input(<span class="string">&quot;请输入第一个整数：&quot;</span>))</span><br><span class="line">num_b = int(input(<span class="string">&quot;请输入第二个整数：&quot;</span>))</span><br><span class="line">result = num_a + num_b</span><br><span class="line">print(num_a+<span class="string">&quot;+&quot;</span>+num_b+<span class="string">&quot;=&quot;</span>+result)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个整数：12</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入第二个整数：13</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个整数：12</span><br><span class="line">请输入第二个整数：13</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:&#x2F;Python Learning&#x2F;20200205&#x2F;int.py&quot;, line 4, in &lt;module&gt;</span><br><span class="line">    print(num_a+&quot;+&quot;+num_b+&quot;&#x3D;&quot;+result)</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</span><br></pre></td></tr></table></figure><p>　　使用<code>+</code>拼接任何数据与字符串时都需要先将任何数据转为字符串类型。</p><p>　　范例：改正以上错误（修改文件 int.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_a = int(input(<span class="string">&quot;请输入第一个整数：&quot;</span>))</span><br><span class="line">num_b = int(input(<span class="string">&quot;请输入第二个整数：&quot;</span>))</span><br><span class="line">result = num_a + num_b</span><br><span class="line">print(str(num_a)+<span class="string">&quot;+&quot;</span>+str(num_b)+<span class="string">&quot;=&quot;</span>+str(result))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个整数：12</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入第二个整数：13</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个整数：12</span><br><span class="line">请输入第二个整数：13</span><br><span class="line">12+13&#x3D;25</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>　　在使用<code>+</code>拼接字符串时总是得先将所有数据转为字符串实在是太麻烦。Python 沿用了传统的格式化输出标记和格式化输出辅助标记。</p><h4 id="格式化输出标记"><a href="#格式化输出标记" class="headerlink" title="格式化输出标记"></a>格式化输出标记</h4><table><thead><tr><th align="center">标记</th><th align="center">描述</th><th align="center">标记</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">输出单个字符字符串</td><td align="center">%s</td><td align="center">输出字符串</td></tr><tr><td align="center">%d</td><td align="center">输出整形</td><td align="center">%f</td><td align="center">输出浮点型，可设置精度</td></tr><tr><td align="center">%e</td><td align="center">以科学计数法格式输出，使用小写字母 e</td><td align="center">%E</td><td align="center">以科学计数法格式输出，使用大写字母E</td></tr><tr><td align="center">%g</td><td align="center">%f 和 %e 的简写</td><td align="center">%G</td><td align="center">%f 和 %E 的简写</td></tr><tr><td align="center">%u</td><td align="center">输出无符号整型</td><td align="center">%o</td><td align="center">输出无符号八进制数</td></tr><tr><td align="center">%x</td><td align="center">输出无符号十六进制数</td><td align="center">%X</td><td align="center">输出无符号十六进制数（大写字母）</td></tr></tbody></table><p>　　范例：格式化输出标记（新建文件 format1.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">url = <span class="string">&quot;https://ql-isaac.github,io&quot;</span></span><br><span class="line">qq = <span class="number">834471527</span></span><br><span class="line">message = <span class="string">&quot;ql 今年 %d 岁，我的个人博客地址：%s，我的 qq 号码(十六进制)：0X%X。&quot;</span>%(age,url,qq)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql 今年 23 岁，我的个人博客地址：https:&#x2F;&#x2F;ql-isaac.github,io，我的 qq 号码(十六进制)：0X31BD0667。</span><br></pre></td></tr></table></figure><h4 id="格式化输出辅助标记"><a href="#格式化输出辅助标记" class="headerlink" title="格式化输出辅助标记"></a>格式化输出辅助标记</h4><table><thead><tr><th align="center">标记</th><th align="center">描述</th><th align="center">标记</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">定义宽度或小数点精度</td><td align="center">#</td><td align="center">在八进制数前面显示零（0），在十六进制数前面显示“0x”或“0X”</td></tr><tr><td align="center">-</td><td align="center">左对齐</td><td align="center">0</td><td align="center">显示位数不足时填充 0</td></tr><tr><td align="center">+</td><td align="center">在正数前面显示加号</td><td align="center">m.n</td><td align="center">m 设置显示总长度，n 设置小数位数</td></tr><tr><td align="center">空格</td><td align="center">显示位数不足时填充空格</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">（var）</td><td align="center">映射变量（字典参数）</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>　　范例：格式化输出辅助标记（一）（新建文件 format2.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">192.121231311121231</span></span><br><span class="line">num_b = <span class="number">98.23</span></span><br><span class="line">print(<span class="string">&quot;%f,%f&quot;</span>%(num_a,num_b)) <span class="comment"># %f 默认保留小数点后六位数字</span></span><br><span class="line">print(<span class="string">&quot;%5.2f,%10.2f&quot;</span>%(num_a,num_b))</span><br><span class="line">print(<span class="string">&quot;%5.2f,%010.2f&quot;</span>%(num_a,num_b))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.121231,98.230000</span><br><span class="line">192.12,     98.23</span><br><span class="line">192.12,0000098.23</span><br></pre></td></tr></table></figure><p>　　范例：格式化输出辅助标记（二）（修改文件 format2.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">192.121231311121231</span></span><br><span class="line">num_b = <span class="number">98.23</span></span><br><span class="line">print(<span class="string">&quot;%(num_a)f,%(num_b)f&quot;</span>%vars()) <span class="comment"># %f 默认保留小数点后六位数字</span></span><br><span class="line">print(<span class="string">&quot;%(num_a)5.2f,%(num_b)10.2f&quot;</span>%vars())</span><br><span class="line">print(<span class="string">&quot;%(num_a)5.2f,%(num_b)010.2f&quot;</span>%vars())</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.121231,98.230000</span><br><span class="line">192.12,     98.23</span><br><span class="line">192.12,0000098.23</span><br></pre></td></tr></table></figure><h3 id="函数-print"><a href="#函数-print" class="headerlink" title="函数 print()"></a>函数 print()</h3><p>　　默认情况下使用函数 print() 都会进行换行，如果不希望换行，可以使用“end“参数。</p><p>　　范例：使用“end“参数（新建文件 print.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;Python:Hello,world&quot;</span>,end=<span class="string">&quot;!&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Hello,ql!&quot;</span>,end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;ql:Hello,Python!&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Python:Hello,world!Hello,ql!</span><br><span class="line">ql:Hello,Python!</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法计算</td><td align="center">20 + 15 = 35</td></tr><tr><td align="center">-</td><td align="center">减法计算</td><td align="center">20 - 15 = 5</td></tr><tr><td align="center">*</td><td align="center">乘法计算</td><td align="center">20 * 15 = 300</td></tr><tr><td align="center">/</td><td align="center">除法计算</td><td align="center">20 / 15 =</td></tr><tr><td align="center">%</td><td align="center">取模计算</td><td align="center">10 % 3 = 1</td></tr><tr><td align="center">**</td><td align="center">幂运算</td><td align="center">10 ** 3 = 1000</td></tr><tr><td align="center">//</td><td align="center">整除计算</td><td align="center">10 // 3 = 3</td></tr></tbody></table><p>　　范例：数学运算符（一）（新建文件 arithmetic.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = (<span class="number">1</span> + <span class="number">2</span>) * (<span class="number">4</span> / <span class="number">2</span>)</span><br><span class="line">print(result)</span><br><span class="line">print(type(result)) <span class="comment"># 只要进行了除法，返回的数据类型就是浮点型</span></span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6.0</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure><p>　　范例：数学运算符（二）（修改文件 arithmetic.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = (<span class="number">1</span> + <span class="number">2</span>) * (<span class="number">4</span> // <span class="number">2</span>)</span><br><span class="line">print(result)</span><br><span class="line">print(type(result)) </span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br></pre></td></tr></table></figure><h3 id="简化赋值运算符"><a href="#简化赋值运算符" class="headerlink" title="简化赋值运算符"></a>简化赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">范例</th><th align="center">形如</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">a += b</td><td align="center">a = a + b</td></tr><tr><td align="center">-=</td><td align="center">a -= b</td><td align="center">a = a - b</td></tr><tr><td align="center">*=</td><td align="center">a *= b</td><td align="center">a = a * b</td></tr><tr><td align="center">/=</td><td align="center">a /= b</td><td align="center">a = a / b</td></tr><tr><td align="center">%=</td><td align="center">a %= b</td><td align="center">a = a % b</td></tr><tr><td align="center">**=</td><td align="center">a **= b</td><td align="center">a = a ** b</td></tr><tr><td align="center">//=</td><td align="center">a //= b</td><td align="center">a = a // b</td></tr></tbody></table><p>　　范例：字符串上使用乘法（新建文件 multiplication.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line">message *= <span class="number">3</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!Hello,world!Hello,world!</span><br></pre></td></tr></table></figure><p>　　Python 中没有自增（<code>++</code>）和自减（<code>--</code>）运算符，因为 Python 中所有的变量都为对象，所有的数据类型都为引用数据类型，而自增（<code>++</code>）和自减（<code>--</code>）运算符是只适用于基本数据类型的。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">相等比较</td><td align="center">1 == 1（True）</td></tr><tr><td align="center">！=</td><td align="center">不等比较</td><td align="center">1 ！= 1（False）</td></tr><tr><td align="center">&gt;</td><td align="center">大于比较</td><td align="center">10 &gt; 5（True）</td></tr><tr><td align="center">&lt;</td><td align="center">小于比较</td><td align="center">10 &lt; 20（True）</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于比较</td><td align="center">10 &gt;= 10（True）</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于比较</td><td align="center">20 &lt;= 20（True）</td></tr></tbody></table><p>　　关系运算符除了能针对数值型数据进行比较之外，还能比较字符串，比较字符串实际上就是依次比较字符的编码。</p><p>　　范例：比较字符串（新建文件 string.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;ql&quot;</span> == <span class="string">&quot;ql&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;ql&quot;</span> &gt; <span class="string">&quot;Ql&quot;</span> &gt; <span class="string">&quot;QL&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>　　如果想知道某单个字符字符串的编码，可使用 ord() 函数。</p><p>　　范例：查看某单个字符字符串的编码（新建文件 ord.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;小写的“l”的编码：%d，大写的“L”的编码：%d&quot;</span>%(ord(<span class="string">&quot;l&quot;</span>),ord(<span class="string">&quot;L&quot;</span>)))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小写的“l”的编码：108，大写的“L”的编码：76</span><br></pre></td></tr></table></figure><p>　　顺便说明一下数字和大小写字母的编码范围：</p><ul><li>数字：”0“(48) ~ ”9“(57)</li><li>大写字母：”A“(65) ~ ”Z“(90)</li><li>小写字母：”a“(97) ~ “z”(122)</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">逻辑与</td></tr><tr><td align="center">or</td><td align="center">逻辑或</td></tr><tr><td align="center">not</td><td align="center">逻辑非</td></tr></tbody></table><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">位与</td></tr><tr><td align="center">|</td><td align="center">位或</td></tr><tr><td align="center">^</td><td align="center">位异或</td></tr><tr><td align="center">~</td><td align="center">位非</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移运算符</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移运算符</td></tr></tbody></table><h4 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>bin(数据)</td><td>转换为二进制数据</td></tr><tr><td>oct(数据)</td><td>转换为八进制数据</td></tr><tr><td>int(数据)</td><td>转换为十进制数据</td></tr><tr><td>hex(数据)</td><td>转换为十六进制数据</td></tr></tbody></table><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>　　Python 中所有的数据类型都为引用数据类型，id() 函数可以获取相应的内存地址。</p><p>　　范例：id() 函数（新建文件 id.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">2</span></span><br><span class="line">num_b = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">num_c = <span class="number">4</span> - <span class="number">2</span></span><br><span class="line">print(<span class="string">&quot;num_a 变量的地址：%d&quot;</span>%id(num_a))</span><br><span class="line">print(<span class="string">&quot;num_b 变量的地址：%d&quot;</span>%id(num_b))</span><br><span class="line">print(<span class="string">&quot;num_c 变量的地址：%d&quot;</span>%id(num_c))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_a 变量的地址：1757145024</span><br><span class="line">num_b 变量的地址：1757145024</span><br><span class="line">num_c 变量的地址：1757145024</span><br></pre></td></tr></table></figure><p>　　Python 中相等比较运算符<code>==</code>类似于 Java 中的<code>equals()</code>。</p><p>　　范例：内容相等比较（新建文件 equals.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">2</span> <span class="comment"># 整形</span></span><br><span class="line">num_b =<span class="number">2.0</span> <span class="comment"># 浮点型</span></span><br><span class="line">print(<span class="string">&quot;整形变量地址：%d，浮点型变量地址：%d，两者内容是否相等：%s&quot;</span>%(id(num_a),id(num_b),(num_a == num_b)))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整形变量地址：1757145024，浮点型变量地址：11878208，两者内容是否相等：True</span><br></pre></td></tr></table></figure><p>　　那么 Java 中的<code>==</code>在 Python 中用什么运算符替代呢？答案是身份运算符。</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">is</td><td align="center">判断是否引用同一内存</td></tr><tr><td align="center">is not</td><td align="center">判断是否引用不同内存</td></tr></tbody></table><p>　　范例：内存地址相等比较（修改文件 equals.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">2</span> <span class="comment"># 整形</span></span><br><span class="line">num_b = <span class="number">2.0</span> <span class="comment"># 浮点型</span></span><br><span class="line">print(<span class="string">&quot;整形变量地址：%d，浮点型变量地址：%d，两者地址是否相等：%s&quot;</span>%(id(num_a),id(num_b),(num_a <span class="keyword">is</span> num_b)))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整形变量地址：1757145024，浮点型变量地址：16400192，两者内容是否相等：False</span><br></pre></td></tr></table></figure><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>　　针对分支结构的实现，Python 里有三个关键字：<code>if</code>、<code>elif</code>（Python 单独提供了该关键字，同 else if）和<code>else</code>，三种语法：</p><ul><li>if判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;布尔表达式&gt;:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>if…else判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;布尔表达式&gt;:</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line"><span class="keyword">else</span>:    </span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><ul><li>多条件判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;布尔表达式&gt;:    </span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;布尔表达式&gt;:    </span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;布尔表达式&gt;:</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">    &lt;...&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure><p>　　不得不说说 Python 中的缩进，Python 根据缩进来判断代码行与前一个代码行的关系，类似于 C 和 Java 语言的大括号，PEP8 建议每级缩进都使用四个空格，这既可提高可读性，又留下了足够多的多级缩进空间。</p><p>　　范例：判断闰年（新建文件 leap_year.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;请输入一个年份：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span>) == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span>(year % <span class="number">100</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span>(year % <span class="number">400</span>) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;%d 年是闰年&quot;</span>%(year)) <span class="comment"># 整百年里能被 400 整除的是闰年</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;%d 年不是闰年&quot;</span>%(year))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;%d 年是闰年&quot;</span>%(year)) <span class="comment"># 非整百年里能被 4 整除的为闰年</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;%d 年不是闰年&quot;</span>%(year))</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>　　循环结构指的就是某段代码重复地执行，在循环结构之中需要定义一个循环的条件，只有在满足循环条件时代码才执行，Python 中循环结构有两种：while 循环和 for 循环。</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;循环条件&gt;:</span><br><span class="line">    &lt;循环语句块&gt;</span><br><span class="line">    &lt;修改循环条件&gt;</span><br></pre></td></tr></table></figure><p>　　或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;循环条件&gt;:</span><br><span class="line">    &lt;循环语句块&gt;</span><br><span class="line">    &lt;修改循环条件&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;循环条件不满足时执行的语句块&gt;</span><br></pre></td></tr></table></figure><p>　　范例：进行 1~100 的自然数的累加（新建文件 accumulation.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">100</span>:</span><br><span class="line">    sum = sum + num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure><p>　　范例：打印 1000 以内的斐波那契数列（新建文件 fibonacci_sequence.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_a = <span class="number">0</span></span><br><span class="line">num_b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num_b &lt; <span class="number">1000</span>:</span><br><span class="line">    print(num_b,end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">    temp = num_b;</span><br><span class="line">    num_b = num_a + num_b</span><br><span class="line">    num_a = temp</span><br></pre></td></tr></table></figure><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><table><thead><tr><th>for 循环</th><th>for…else 循环</th></tr></thead><tbody><tr><td>for 变量 in 序列<br/>    循环语句</td><td>for 变量 in 序列<br/>    循环语句<br/>else:<br/>    循环语句执行完毕后的语句</td></tr></tbody></table><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>　　Python 在设计的过程中强调的一直是简洁性。在许多的编程语言中，都是首先利用了数组去描述多数据的存储，但是数组有长度固定，插入麻烦等缺点，因而才有了许多数据结构来满足我们的各种需求，Python 则帮我们封装了数组和许多数据结构，相应着重提出了序列这一概念，将能动态修改的内容统一称为序列，在 Python 之中字符串、列表、元组、字典都属于序列。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>　　直接使用一对中括号定义列表，可使用索引访问列表元素，从 0 开始。</p><p>　　范例：定义列表（新建文件 list.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line">print(infos[<span class="number">0</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">1</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C&#x2F;C++、Java、Python</span><br></pre></td></tr></table></figure><h4 id="列表的特性"><a href="#列表的特性" class="headerlink" title="列表的特性"></a>列表的特性</h4><p>　　范例：空列表不等同于 None（新建文件 None.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_a = []</span><br><span class="line">list_b = <span class="literal">None</span></span><br><span class="line">print(<span class="string">&quot;list_a的地址为 %d，类型为 %s&quot;</span>%(id(list_a),type(list_a))</span><br><span class="line">print(<span class="string">&quot;list_b的地址为 %d，类型为 %s&quot;</span>%(id(list_b),type(list_b))</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_a的地址为 13626696，类型为 &lt;class &#39;list&#39;&gt;</span><br><span class="line">list_b的地址为 1453821160，类型为 &lt;class &#39;NoneType&#39;&gt;</span><br></pre></td></tr></table></figure><p>　　范例：在进行索引访问时不能越界（修改文件 list.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line">print(infos[<span class="number">0</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">1</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">2</span>])</span><br><span class="line">print(infos[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C&#x2F;C++、Java、Python</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:&#x2F;Python Learning&#x2F;（一）&#x2F;20200226&#x2F;list.py&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    print(infos[3])</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>　　范例：列表除了可以正向索引访问之外，还可以反向索引访问（修改文件 list.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line">print(infos[<span class="number">-3</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">-2</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C&#x2F;C++、Java、Python</span><br></pre></td></tr></table></figure><p>　　范例：通过列表保存多种数据类型（新建文件python.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;简洁&quot;</span>,[<span class="string">&quot;列表元素 1&quot;</span>,<span class="string">&quot;列表元素 2&quot;</span>,<span class="string">&quot;列表元素 3&quot;</span>]] <span class="comment"># 数据的意义：编程语言（Python），特点（简洁），举例（列表）</span></span><br><span class="line">print(<span class="string">&quot;编程语言：%s&quot;</span>%infos[<span class="number">0</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;特点：%s&quot;</span>%infos[<span class="number">1</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;举例：%s&quot;</span>%infos[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编程语言：Python、特点：简洁、举例：[&#39;列表元素 1&#39;, &#39;列表元素 2&#39;, &#39;列表元素 3&#39;]</span><br></pre></td></tr></table></figure><p>　　范例：使用 for 循环迭代输出（修改文件 list.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> pl <span class="keyword">in</span> infos:</span><br><span class="line">    print(pl)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C&#x2F;C++</span><br><span class="line">Java</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><p>　　范例：使用 for 循环索引访问输出（修改文件 list.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(infos)):</span><br><span class="line">    print(infos[index])</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C&#x2F;C++</span><br><span class="line">Java</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><p>　　范例：根据索引修改数据内容（修改文件 list.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span><br><span class="line">infos[<span class="number">1</span>] = <span class="string">&quot;PHP&quot;</span></span><br><span class="line">print(infos[<span class="number">0</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">1</span>],end=<span class="string">&quot;、&quot;</span>)</span><br><span class="line">print(infos[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C&#x2F;C++、PHP、Python</span><br></pre></td></tr></table></figure><p>　　范例：使用乘法（新建文件 multiply.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>] * <span class="number">3</span></span><br><span class="line">print(infos)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;C&#x2F;C++&#39;, &#39;Java&#39;, &#39;Python&#39;, &#39;C&#x2F;C++&#39;, &#39;Java&#39;, &#39;Python&#39;, &#39;C&#x2F;C++&#39;, &#39;Java&#39;, &#39;Python&#39;]</span><br></pre></td></tr></table></figure><p>　　范例：使用加法（新建文件 add.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">infos = [<span class="string">&quot;C/C++&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Python&quot;</span>] + [<span class="string">&quot;PHP&quot;</span>]</span><br><span class="line">print(infos)</span><br></pre></td></tr></table></figure><p>　　打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;C&#x2F;C++&#39;, &#39;Java&#39;, &#39;Python&#39;, &#39;PHP&#39;]</span><br></pre></td></tr></table></figure><h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4><p>　　列表的数据分片，即截取列表的一部分，即子列表</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h3 id="序列统计函数"><a href="#序列统计函数" class="headerlink" title="序列统计函数"></a>序列统计函数</h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="函数深入"><a href="#函数深入" class="headerlink" title="函数深入"></a>函数深入</h2><h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><p>　　lambda 表达式即 lambda 函数，</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3>]]></content>
      
      
      <categories>
          
          <category> Python 从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
            <tag> Python v3.8.1 </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 Git？</title>
      <link href="2020/01/24/What-is-Git/"/>
      <url>2020/01/24/What-is-Git/</url>
      
        <content type="html"><![CDATA[<p>　　Git 是一个目前世界上最流行的开源分布式版本控制系统。</p><a id="more"></a><h2 id="Git-的诞生"><a href="#Git-的诞生" class="headerlink" title="Git 的诞生"></a>Git 的诞生</h2><p>　　Git 是<a href="https://www.baidu.com/s?wd=%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">林纳斯·托瓦兹</a>为了帮助管理 <a href="https://baike.baidu.com/item/Linux/27050">Linux</a> 内核开发而开发的。在2002年以前，世界各地的志愿者还是以一种传统的方式将源代码文件发给林纳斯·托瓦兹，然后由他本人通过手工方式合并代码。当时虽然有 CSV、SVN 这些免费的版本控制系统，但是速度慢、需要联网，也有一些商用的版本控制系统，虽然比 CSV、SVN 好用，但是不开源，和 Linux 的开源精神不符。2002 年，Linux 系统已经发展了十年，代码库之大让林纳斯·托瓦兹很难继续通过手工方式管理，最终林纳斯·托瓦兹选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统，这看起来是一个很好的局面。Linux 社区牛人聚集，2005年，开发 Samba 的 Andrew 试图破解 BitKeeper 的协议的行为被 BitMover 公司发现，Linux 社区的 BitKeeper 免费使用权被收回，于是，<a href="https://www.baidu.com/s?wd=%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">林纳斯·托瓦兹</a>花了两周时间自己用 C 写了一个分布式版本控制系统，Git诞生！之后，Git 迅速成为最流行的分布式版本控制系统，随即，2008 年，GitHub 网站上线，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括jQuery、PHP、Ruby 等等。</p><h2 id="安装和配置-Git"><a href="#安装和配置-Git" class="headerlink" title="安装和配置 Git"></a>安装和配置 Git</h2><p>　　我在《我的 HexoBlog 的诞生（一）》中已经完成了 Git 的安装和配置，不过那只是在 Windows上，而且也没详细讲，这里就详细讲解一下如何在 Windows 和 Linux 上安装和配置 Git 吧。</p><h3 id="Windows-10-上安装和配置-Git"><a href="#Windows-10-上安装和配置-Git" class="headerlink" title="Windows 10 上安装和配置 Git"></a>Windows 10 上安装和配置 Git</h3><ol><li><p>点击安装程序；</p><p><img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F.png" alt="安装程序"></p></li><li><p>GNU 许可证：不看，Next；</p><p><img src="https://image.ql-isaac.cn/%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE.png" alt="许可协议"></p></li><li><p>设置安装路径：建议将 C 改为 D，安装在 D 盘，这里就不改了，Next；</p><p><img src="https://image.ql-isaac.cn/%E8%AE%BE%E7%BD%AE%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.png" alt="设置安装路径"></p></li><li><p>安装组件：第一个选项是说是否创建桌面快捷方式，可以不勾选，下面六个都勾选了，为默认，不更改，倒数第一个是说是否检查更新，可以不勾选，倒数第二个是说是否在所有控制台窗口中使用 TrueType 字体，勾选，Next；</p><p><img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85%E7%BB%84%E4%BB%B6.png" alt="安装组件"></p></li><li><p>开始菜单设置：直接 Next；</p><p><img src="https://image.ql-isaac.cn/%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95%E8%AE%BE%E7%BD%AE.png" alt="开始菜单设置"></p></li><li><p>设置 Git 的默认文本编辑器：就选择 Vim，Next；</p><p><img src="https://image.ql-isaac.cn/%E8%AE%BE%E7%BD%AEGit%E7%9A%84%E9%BB%98%E8%AE%A4%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="设置Git的默认文本编辑器"></p></li><li><p>调整 PATH 环境：就选择默认推荐的，Next。该推荐项是说仅向 PATH 添加一些最小的 Git 包装器，以避免使用可选的 Unix 工具造成环境混乱，能够通过 Git Bash、命令提示符、Windows PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件使用 Git。</p><p><img src="https://image.ql-isaac.cn/%E8%B0%83%E6%95%B4Path%E7%8E%AF%E5%A2%83.png" alt="调整Path环境"></p></li><li><p>选择 HTTPS 后端传输：第一个选项是说使用 OpenSSL 库，服务器证书将使用 ca-bundle.crt 文件进行验证，这是我们常用的选项。第二个选项是说使用本地 Windows 安全通道库，服务器证书将使用 Windows 证书存储验证，此选项还允许使用公司的内部根 CA 证书，例如通过 Active Directory Domain Services。这里，就默认第一个选项，Next；</p><p><img src="https://image.ql-isaac.cn/%E9%80%89%E6%8B%A9HTTPS%E5%90%8E%E7%AB%AF%E4%BC%A0%E8%BE%93.png" alt="选择HTTPS后端传输"></p></li><li><p>配置行尾符号转换：第一个选项是说签出 Windows 风格，提交 Unix 风格的行尾，即签出文本文件时，Git 会将 LF 转换为 CRLF，提交文本文件时，CRLF 将转换为 LF，对于跨平台项目，这是 Windows 上的推荐设置（“core.autocrlf”设置为“true”）。第二个选项是说按原样签出，提交 Unix 样式的行尾，签出文本文件时，Git 不会执行任何转换，提交文本文件时，CRLF 将转换为 LF，对于跨平台项目，这是 Unix 上的建议设置（“core.autocrlf”设置为“input”）。第三个选项是说按原样签出，按原样提交，当签出或提交文本文件时，Git 不会执行任何转换，不建议跨平台项目选择此选项（“core.autocrlf”设置为“false”）。这里，就默认第一个选项，Next；</p><p><img src="https://image.ql-isaac.cn/%E9%85%8D%E7%BD%AE%E8%A1%8C%E5%B0%BE%E7%AC%A6%E5%8F%B7%E8%BD%AC%E6%8D%A2.png" alt="配置行尾符号转换"></p></li><li><p>配置终端模拟器以与 Git Bash 一起使用：第一个选项是说使用 MinTTY（MSYS2 的默认终端）。Git Bash 将使用 MinTTY 作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和 Unicode 字体，Windows 控制台程序（例如交互式 Python）必须通过“ winpty”启动才能在 MinTTY 中运行。第二个选项是说使用 Windows 的默认控制台窗口。Git 将使用 Windows 的默认控制台窗口（“cmd.exe”），该窗口可以与 Win32 控制台程序（如交互式 Python 或 node.js）一起使用，但默认的回滚非常有限，需要配置为使用 unicode 字体以正确显示非 ASCII 字符，并且在 Windows 10 之前，其窗口不能自由调整大小，并且只允许矩形文本选择。这里，就默认第一个选项，Next；</p><p><img src="https://image.ql-isaac.cn/%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%BB%A5%E4%B8%8EGit_Bash%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8.png" alt="配置终端模拟器以与Git_Bash一起使用"></p></li><li><p>配置额外的选项：第一个选项是说启用文件系统缓存。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）， 这可以显着地提升性能。第二个选项是说启用 Git 凭证管理器。Windows 的 Git 凭证管理器为 Windows 提供安全的 Git 凭证存储，最显著的是对 Visual Studio Team Services 和 GitHub 的多因素身份验证支持（需要 .NET Framework v4.5.1 或更高版本）。第三个选项是说启用符号链接，启用符号链接需要 SeCreateSymbolicLink 权限，现有存储库不受此设置的影响。这里，就默认第一个和第二个选项，Install；</p><p><img src="https://image.ql-isaac.cn/%E9%85%8D%E7%BD%AE%E9%A2%9D%E5%A4%96%E7%9A%84%E9%80%89%E9%A1%B9.png" alt="配置额外的选项"></p></li><li><p>安装完成：Next；</p><p><img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="安装完成"></p></li><li><p>Release Notes；</p><p><img src="https://image.ql-isaac.cn/ReleaseNotes.png" alt="ReleaseNotes"></p></li><li><p>至此 Git 就算安装完毕了，之后需要去 <a href="https://github.com/">Github</a> 注册一个自己的账号，注意需要绑定自己的邮箱，建议是谷歌邮箱；</p></li></ol><p><img src="https://image.ql-isaac.cn/%E6%B3%A8%E5%86%8C.png" alt="注册"></p><ol start="15"><li><p>在桌面右键，点击 Git Bash Here；</p><p><img src="https://image.ql-isaac.cn/%E6%A1%8C%E9%9D%A2%E5%8F%B3%E9%94%AE.png" alt="桌面右键"></p></li><li><p>全局用户信息配置：分别输入以下两个命令回车执行，无提示表示命令执行成功，可以用<code>git config --list</code>来查看配置好的信息；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;&lt;自己的 Github 用户名&gt;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">&quot;&lt;自己的 Github 邮箱&gt;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>生成 SSH 秘钥：输入以下命令回车执行，然后连敲三次回车键，此时打开 .ssh 文件夹，其位于自己的 Windows 用户文件夹下，如下图，用文本编辑器打开 id_rsa.pub，Ctrl+A，复制里面全部的内容；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/SSH.png" alt="SSH"></p></li><li><p>Github 的 SSH 公钥配置：登录自己的 Github 账号，点击右上角的头像，点击 Setting，点击左侧的 SSH and GPG keys，点击右侧的 New SSH key，填写 Tile，粘贴刚复制的内容为 Key，最后点击 Add SSH key；</p></li><li><p>测试一下，输入以下命令回车执行，输入 yes，再回车，有如下提示，表示本机和自己的 GitHub 绑定成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &lt;自己的 Github 用户名&gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li></ol><h3 id="Ubuntu-18-04-LTS-上安装和配置-Git"><a href="#Ubuntu-18-04-LTS-上安装和配置-Git" class="headerlink" title="Ubuntu 18.04 LTS 上安装和配置 Git"></a>Ubuntu 18.04 LTS 上安装和配置 Git</h3><ol><li><p>相比在 Windows 上，在 Linux 上安装和配置 Git 的步骤就比较少了。在终端输入以下命令回车执行，确保系统和 apt 包列表完全更新；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/%E6%9B%B4%E6%96%B0.png" alt="更新"></p></li><li><p>在终端输入以下命令回车，安装 Git，可再输入以下命令查看 Git 版本；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="https://image.ql-isaac.cn/%E5%AE%89%E8%A3%85Git.gif" alt="安装Git"></p></li><li><p>全局用户信息配置：分别输入以下两个命令回车执行，无提示表示命令执行成功，可以用<code>git config --list</code>来查看配置好的信息；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&lt;自己的 Github 用户名&gt;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;&lt;自己的 Github 邮箱&gt;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>生成 SSH 秘钥：输入以下命令回车执行，然后连敲三次回车键；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>输入以下命令回车，输入用户密码安装 Vim 文本编辑器；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令，用 Vim 打开公钥文件，复制其中的内容（不要复制多了，也不要复制少了）；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/&lt;自己的用户名&gt;/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>登录自己的 Github 账号，点击右上角的头像，点击 Setting，点击左侧的 SSH and GPG keys，点击右侧的 New SSH key，填写Tile，粘贴刚复制的内容为 Key，最后点击 Add SSH key；</p></li><li><p>测试一下，输入以下命令回车执行，有如下提示，表示本机和自己的 GitHub 绑定成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Hi &lt;自己的GitHub用户名&gt;! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-的工作流程"><a href="#Git-的工作流程" class="headerlink" title="Git 的工作流程"></a>Git 的工作流程</h2><ol><li><p>克隆 Git 资源作为工作副本；</p></li><li><p>在工作副本中编辑、添加或修改文件；</p></li><li><p>如果其他人提交了修改，你可以选择更新工作副本；</p></li><li><p>在提交前查看修改；</p></li><li><p>提交修改；</p></li><li><p>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/What-is-Git/Git%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" alt="Git 的工作流程"></p><h2 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h2><ul><li>工作区：工作目录的实际情况。</li><li>暂存区：即工作副本（修改）。</li><li>版本库：即历史提交。</li></ul><p>　　下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/What-is-Git/Git%20%E5%B7%A5%E4%BD%9C%E5%8C%BA%E3%80%81%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E7%89%88%E6%9C%AC%E5%BA%93.jpg"></p><ol><li><p>当对当前工作区编辑（M）、添加（A）或删除（D）的文件执行 git add 命令时，暂存区的目录树被更新；</p></li><li><p>当执行提交操作（git commit）时，暂存区转化为版本库的下一次提交；</p></li><li><p>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，被版本库最新版本（HEAD）替换，但是工作区不受影响；</p></li><li><p>当执行<code>git checkout .</code>或者<code>git checkout -- &lt;file&gt;</code>命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动；</p></li><li><p>当执行<code>git rm --cached &lt;file&gt;</code>命令时，会直接从暂存区删除文件，工作区则不做出改变；</p></li><li><p>当执行<code>git checkout HEAD .</code>或者<code>git checkout HEAD &lt;file&gt;</code>命令时，会用版本库最新版本（HEAD）全部或者部分文件替换暂存区以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未添加到暂存区的改动，也会清除暂存区中未提交的改动。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git 和 GitHub 从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
            <tag> Git v2.25.0.windows.1 </tag>
            
            <tag> Git v2.17.1 </tag>
            
            <tag> Ubuntu 18.04 LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 HexoBlog 的诞生（三）</title>
      <link href="2020/01/24/My-HexoBlog-with-NexT(3)/"/>
      <url>2020/01/24/My-HexoBlog-with-NexT(3)/</url>
      
        <content type="html"><![CDATA[<p>　　本文记录和讲解我的 HexoBlog 的使用，会持续更新。</p><a id="more"></a><script src="https://cdn.jsdelivr.net/npm/hls.js"></script><h2 id="使用-Typora-编辑-Markdown-文件，书写博客文章"><a href="#使用-Typora-编辑-Markdown-文件，书写博客文章" class="headerlink" title="使用 Typora 编辑 Markdown 文件，书写博客文章"></a>使用 Typora 编辑 Markdown 文件，书写博客文章</h2><p>　　通过执行<code>hexo new post &lt;自定义 md 文件名&gt;</code>，相应 Markdown 文件将在 _posts 下生成，那么该如何编辑这种 Markdown 文件，书写自己的博客文章呢？</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>　　Markdown 是一种轻量级的标记语言，类似于 HTML，但 Markdown 的语法十分简单，常用的标记符号也不超过十个。</p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>　　Typora 是一个 Markdown 文件阅读器与编辑器，支持 MacOS、Windows、Linux 平台，可到<a href="https://typora.io/"> Typora 官网</a>下载。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>　　使用<code>#</code>可表示 1-6 级标题。一级标题对应一个 #，二级标题对应两个 # ，以此类推，如下视频（注意 # 后面有一个空格）。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br></pre></td></tr></table></figure><p>　　演示视频：</p><p><video id="video1" preload controls loop style="height: 100%;width: 100%;object-fit: cover;"></video></p><script>  if (Hls.isSupported()) {    var video1 = document.getElementById('video1');    var hls = new Hls();    hls.loadSource('https://cdn.jsdelivr.net/gh/ql-isaac/post-video-1/标题/标题.m3u8');    hls.attachMedia(video1);    hls.on(Hls.Events.MANIFEST_PARSED,function() {      video.play();  });  }</script><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>　　经常用的是有序列表和无序列表。使用<code>&lt;序号&gt;. </code>（<code>.</code>后面有一个空格）可表示有序列表，回车自动生成下一项，如下图。</p><p><img src="https://image.ql-isaac.cn/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.gif" alt="有序列表"></p><p>　　使用<code>- </code>（<code>-</code>后面有空格）可表示无序列表，回车自动生成下一项，如下图。</p><p><img src="https://image.ql-isaac.cn/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.gif" alt="无序列表"></p><p>　　还有一个任务列表，使用<code>- [ ] </code>（<code>[ ]</code>后面有空格）可表示任务列表，回车自动生成下一项，如下图。</p><p><img src="https://image.ql-isaac.cn/%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8.gif" alt="任务列表"></p><h2 id="如何在文章中插入图片、视频和音乐？"><a href="#如何在文章中插入图片、视频和音乐？" class="headerlink" title="如何在文章中插入图片、视频和音乐？"></a>如何在文章中插入图片、视频和音乐？</h2><h3 id="开启每篇文章的资源文件夹"><a href="#开启每篇文章的资源文件夹" class="headerlink" title="开启每篇文章的资源文件夹"></a>开启每篇文章的资源文件夹</h3><p>　　打开 Hexo 的配置文件，关键字 post_asset_folder 查找，将 post_asset_folder 的值改为 true。每次新生成 layout（layout 默认有 post、page 和 draft 三种 ）时都会在对应生成的 Markdown 文件同级目录下生成一个对应的资源文件夹，可将图片、音乐或视频存入该文件夹，这样，想插入图片、音乐或视频时直接填写图片、音乐或视频的完整文件名即可。</p><h3 id="在文章内插入视频"><a href="#在文章内插入视频" class="headerlink" title="在文章内插入视频"></a>在文章内插入视频</h3><p>　　在[存储 HexoBlog 的文件夹]下进入终端，输入如下命令安装  hexo-tag-dplayer。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-tag-dplayer</span><br></pre></td></tr></table></figure><h2 id="访问体验优化"><a href="#访问体验优化" class="headerlink" title="访问体验优化"></a>访问体验优化</h2>]]></content>
      
      
      <categories>
          
          <category> 我的 HexoBlog 的诞生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
            <tag> Hexo v4.2.0 </tag>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 HexoBlog 的诞生（二）</title>
      <link href="2020/01/24/My-HexoBlog-with-NexT(2)/"/>
      <url>2020/01/24/My-HexoBlog-with-NexT(2)/</url>
      
        <content type="html"><![CDATA[<p>　　本文记录和讲解一下我的 HexoBlog 是如何个性化设置和配置的，可供大家参考，我会持续更新，保持和<a href="https://ql-isaac.github.io/">我的 HexoBlog </a>的同步。</p><a id="more"></a><script src="https://cdn.jsdelivr.net/npm/hls.js"></script><h2 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h2><p>　　个性化设置和配置了一处自己的 HexoBlog，可以通过本地部署的方式（即在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，输入<code>hexo s</code>）查看相应效果，甚至可以直接修改一处，刷新一下查看效果，等都设置和配置完毕了再部署到 Github Pages 中，即在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，执行<code>hexo clean &amp;&amp; hexo g -d</code>。</p><h2 id="Hexo-的个性化设置和配置"><a href="#Hexo-的个性化设置和配置" class="headerlink" title="Hexo 的个性化设置和配置"></a>Hexo 的个性化设置和配置</h2><h3 id="配置博客站点基本信息"><a href="#配置博客站点基本信息" class="headerlink" title="配置博客站点基本信息"></a>配置博客站点基本信息</h3><p>　　编辑 Hexo 的配置文件，个性化配置自己的站点信息即可：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 4 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 4 行，请以实际情况为准）</span><br><span class="line"># Site</span><br><span class="line"><span class="deletion">-title: Hexo</span></span><br><span class="line"><span class="deletion">-subtitle: &#x27;&#x27;</span></span><br><span class="line"><span class="deletion">-description: &#x27;&#x27;</span></span><br><span class="line"><span class="deletion">-keywords:</span></span><br><span class="line"><span class="deletion">-author: John Doe</span></span><br><span class="line"><span class="deletion">-language: en</span></span><br><span class="line"><span class="deletion">-timezone: &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 4 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 4 行，请以实际情况为准）</span><br><span class="line"># Site</span><br><span class="line"><span class="addition">+title: ql&#x27;s HexoBlog</span></span><br><span class="line"><span class="addition">+subtitle: It&#x27;s a beautiful day!</span></span><br><span class="line"><span class="addition">+description: 学习与生活</span></span><br><span class="line"><span class="addition">+keywords: 学习与生活</span></span><br><span class="line"><span class="addition">+author: ql-isaac</span></span><br><span class="line"><span class="addition">+language: zh-CN</span></span><br><span class="line"><span class="addition">+timezone: </span></span><br></pre></td></tr></table></figure><p>　　效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.png" alt="配置博客站点基本信息"></p><h3 id="下载和设置-NexT-主题"><a href="#下载和设置-NexT-主题" class="headerlink" title="下载和设置 NexT 主题"></a>下载和设置 NexT 主题</h3><p>　　原版的 landscape 主题并不好看，在网上搜索了一下，发现 NexT 主题是最受欢迎的。</p><p>　　在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，输入如下命令，等待 NexT 下载到当前文件夹下 themes 下 next 下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>　　下载完成后，编辑 Hexo 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 92 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 92 行，请以实际情况为准）</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"><span class="deletion">-theme: landscape</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 92 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 92 行，请以实际情况为准）</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"><span class="addition">+theme: next</span></span><br></pre></td></tr></table></figure><h2 id="NexT-的个性化设置与配置"><a href="#NexT-的个性化设置与配置" class="headerlink" title="NexT 的个性化设置与配置"></a>NexT 的个性化设置与配置</h2><h3 id="在页脚添加建站年份"><a href="#在页脚添加建站年份" class="headerlink" title="在页脚添加建站年份"></a>在页脚添加建站年份</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 49 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 49 行，请以实际情况为准</span><br><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line"><span class="deletion">-  #since: 2015</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line"><span class="addition">+  since: 2020</span></span><br></pre></td></tr></table></figure><p>　　效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/%E9%A1%B5%E8%84%9A%E5%BB%BA%E7%AB%99%E5%B9%B4%E4%BB%BD.png" alt="image-20210317220238757"></p><h3 id="在页脚添加备案信息"><a href="#在页脚添加备案信息" class="headerlink" title="在页脚添加备案信息"></a>在页脚添加备案信息</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 78 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 78 行，请以实际情况为准</span><br><span class="line">  # Beian ICP and gongan information for Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line"><span class="deletion">-    enable: false</span></span><br><span class="line"><span class="deletion">-    icp:</span></span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span><br><span class="line">    gongan_icon_url:</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 78 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 78 行，请以实际情况为准</span><br><span class="line">  # Beian ICP and gongan information for Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line"><span class="addition">+    enable: true</span></span><br><span class="line"><span class="addition">+    icp: 京 ICP 备 20031573 号 -1</span></span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span><br><span class="line">    gongan_icon_url:</span><br></pre></td></tr></table></figure><p>　　效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/%E9%A1%B5%E8%84%9A%E5%A4%87%E6%A1%88%E4%BF%A1%E6%81%AF.png" alt="页脚备案信息"></p><h3 id="选择主题风格"><a href="#选择主题风格" class="headerlink" title="选择主题风格"></a>选择主题风格</h3><p>　　编辑 NexT 的配置文件（我保持的默认，喜欢其他的风格的话把前面的 # 去掉即可，注意只能启用一种风格）：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 105 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 105 行，请以实际情况为准</span><br><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>　　各种主题风格展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/Muse.png" alt="Muse"></p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/Mist.png" alt="Mist"></p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/Pisces.png" alt="Pisces"></p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/Gemini.png" alt="Gemini"></p><h3 id="添加标签和分类菜单项"><a href="#添加标签和分类菜单项" class="headerlink" title="添加标签和分类菜单项"></a>添加标签和分类菜单项</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 116 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 116 行，请以实际情况为准</span><br><span class="line"># Usage: `Key: /link/ || icon`</span><br><span class="line"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="line"># External url should start with http:// or https://</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line"><span class="deletion">-  #tags: /tags/ || tags</span></span><br><span class="line"><span class="deletion">-  #categories: /categories/ || th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 116 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 116 行，请以实际情况为准</span><br><span class="line"># Usage: `Key: /link/ || icon`</span><br><span class="line"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="line"># External url should start with http:// or https://</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line"><span class="addition">+  tags: /tags/ || tags</span></span><br><span class="line"><span class="addition">+  categories: /categories/ || th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>　　在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>　　编辑生成的 index.md：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="deletion">-title: tags</span></span><br><span class="line">date: 2020-01-24 22:20:25</span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="addition">+title: 标签</span></span><br><span class="line">date: 2020-01-24 22:20:25</span><br><span class="line"><span class="addition">+type: tags</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure><p>　　在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>　　编辑生成的 index.md：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="deletion">-title: categories</span></span><br><span class="line">date: 2020-01-24 22:21:09</span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="addition">+title: 分类</span></span><br><span class="line">date: 2020-01-24 22:21:09</span><br><span class="line"><span class="addition">+type: categories</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure><p>　　编辑文章模板文件（为&lt;存储 HexoBlog 的文件夹&gt;下 scaffolds 下 post.md）：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line"><span class="addition">+categories:</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure><p>　　以后想写文章（执行<code>hexo new post &lt;自定义名&gt;</code>，编辑相应生成的&lt;自定义名&gt;.md）时，只需自定义 tags 和 categories 的值（注意键值之间有空格），该文章就会在标签页面和分类页面被标记和分类起来。</p><h3 id="加入豆瓣页面"><a href="#加入豆瓣页面" class="headerlink" title="加入豆瓣页面"></a>加入豆瓣页面</h3><p>　　在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，输入如下命令安装 hexo-douban 插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-douban</span><br></pre></td></tr></table></figure><p>　　编辑 Hexo 的配置文件，如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 104 行</span><br><span class="line"><span class="addition">+douban:</span></span><br><span class="line"><span class="addition">+  user: &lt;豆瓣 ID&gt;</span></span><br><span class="line"><span class="addition">+  builtin: true</span></span><br><span class="line"><span class="addition">+  book:</span></span><br><span class="line"><span class="addition">+    title: &lt;书籍页面的标题&gt;</span></span><br><span class="line"><span class="addition">+    quote: &lt;开头的引言&gt;</span></span><br><span class="line"><span class="addition">+  movie:</span></span><br><span class="line"><span class="addition">+    title: &lt;电影页面的标题&gt;</span></span><br><span class="line"><span class="addition">+    quote: &lt;开头的引言&gt;</span></span><br><span class="line"><span class="addition">+  game:</span></span><br><span class="line"><span class="addition">+    title: &lt;游戏页面的标题&gt;</span></span><br><span class="line"><span class="addition">+    quote: &lt;开头的引言&gt;</span></span><br><span class="line"><span class="addition">+  timeout: 10000</span></span><br></pre></td></tr></table></figure><p>　　添加图书、电影和游戏菜单项。编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的 116 行</span><br><span class="line"># Usage: `Key: /link/ || icon`</span><br><span class="line"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="line"># External url should start with http:// or https://</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"><span class="addition">+  books: /books || book</span></span><br><span class="line"><span class="addition">+  movies: /movies || video-camera</span></span><br><span class="line"><span class="addition">+  games: /games || gamepad</span></span><br></pre></td></tr></table></figure><p>　　编辑 NexT 的中文语言文件（为&lt;存储 HexoBlog 的文件夹&gt;下 themes 下 next 下 languages 下 zh-CN.yml）：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line">title:</span><br><span class="line">  archive: 归档</span><br><span class="line">  category: 分类</span><br><span class="line">  tag: 标签</span><br><span class="line">  schedule: 日程表</span><br><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益 404</span><br><span class="line"><span class="addition">+  books: 阅读</span></span><br><span class="line"><span class="addition">+  movies: 电影</span></span><br><span class="line"><span class="addition">+  games: 游戏</span></span><br><span class="line">sidebar:</span><br><span class="line">  overview: 站点概览</span><br><span class="line">  toc: 文章目录</span><br><span class="line">post:</span><br><span class="line">  posted: 发表于</span><br><span class="line">  edited: 更新于</span><br><span class="line">  created: 创建时间</span><br><span class="line">  modified: 修改时间</span><br><span class="line">  edit: 编辑</span><br><span class="line">  in: 分类于</span><br><span class="line">  more: 更多</span><br><span class="line">  read_more: 阅读全文</span><br><span class="line">  untitled: 未命名</span><br><span class="line">  sticky: 置顶</span><br><span class="line">  views: 阅读次数</span><br><span class="line">  related_posts: 相关文章</span><br><span class="line">  copyright:</span><br><span class="line">    author: 本文作者</span><br><span class="line">    link: 本文链接</span><br><span class="line">    license_title: 版权声明</span><br><span class="line">    license_content: &quot;本博客所有文章除特别声明外，均采用 %s 许可协议。转载请注明出处！&quot;</span><br><span class="line">footer:</span><br><span class="line">  powered: &quot;由 %s 强力驱动&quot;</span><br><span class="line">  theme: 主题</span><br><span class="line">  total_views: 总访问量</span><br><span class="line">  total_visitors: 总访客量</span><br><span class="line">counter:</span><br><span class="line">  tag_cloud:</span><br><span class="line">    zero: 暂无标签</span><br><span class="line">    one: 目前共计 1 个标签</span><br><span class="line">    other: &quot;目前共计 %d 个标签&quot;</span><br><span class="line">  categories:</span><br><span class="line">    zero: 暂无分类</span><br><span class="line">    one: 目前共计 1 个分类</span><br><span class="line">    other: &quot;目前共计 %d 个分类&quot;</span><br><span class="line">  archive_posts:</span><br><span class="line">    zero: 暂无日志。</span><br><span class="line">    one: 目前共计 1 篇日志。</span><br><span class="line">    other: &quot;目前共计 %d 篇日志。&quot;</span><br><span class="line">state:</span><br><span class="line">  posts: 日志</span><br><span class="line">  tags: 标签</span><br><span class="line">  categories: 分类</span><br><span class="line">search:</span><br><span class="line">  placeholder: 搜索...</span><br><span class="line">cheers:</span><br><span class="line">  um: 嗯..</span><br><span class="line">  ok: 还行</span><br><span class="line">  nice: 不错</span><br><span class="line">  good: 很好</span><br><span class="line">  great: 非常好</span><br><span class="line">  excellent: 太棒了</span><br><span class="line">keep_on: 继续努力。</span><br><span class="line">symbol:</span><br><span class="line">  comma: &quot;，&quot;</span><br><span class="line">  period: &quot;。&quot;</span><br><span class="line">  colon: &quot;：&quot;</span><br><span class="line">reward:</span><br><span class="line">  donate: 打赏</span><br><span class="line">  wechatpay: 微信支付</span><br><span class="line">  alipay: 支付宝</span><br><span class="line">  bitcoin: 比特币</span><br><span class="line">accessibility:</span><br><span class="line">  nav_toggle: 切换导航栏</span><br><span class="line">  prev_page: 上一页</span><br><span class="line">  next_page: 下一页</span><br><span class="line">symbols_count_time:</span><br><span class="line">  count: 本文字数</span><br><span class="line">  count_total: 站点总字数</span><br><span class="line">  time: 阅读时长</span><br><span class="line">  time_total: 站点阅读时长</span><br><span class="line">  time_minutes: 分钟</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="侧边栏显示设置（只适合风格-Muse-或-Mist）"><a href="#侧边栏显示设置（只适合风格-Muse-或-Mist）" class="headerlink" title="侧边栏显示设置（只适合风格 Muse 或 Mist）"></a>侧边栏显示设置（只适合风格 Muse 或 Mist）</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 155 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 155 行，请以实际情况为准</span><br><span class="line">  # Sidebar Display (only for Muse | Mist), available values:</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically.</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  totally remove sidebar including sidebar toggle.</span><br><span class="line"><span class="deletion">-  display: post</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 155 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 155 行，请以实际情况为准</span><br><span class="line">  # Sidebar Display (only for Muse | Mist), available values:</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically.</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  totally remove sidebar including sidebar toggle.</span><br><span class="line"><span class="addition">+  display: always</span></span><br></pre></td></tr></table></figure><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>　　选择一张图片，放在&lt;存储 HexoBlog 的文件夹&gt;下 themes 下 next 下 source 下 images 下，然后编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 169 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 169 行，请以实际情况为准</span><br><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line"><span class="deletion">-  url: #/images/avatar.gif</span></span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line"><span class="deletion">-  rounded: false</span></span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line"><span class="deletion">-  rotated: false</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 169 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 169 行，请以实际情况为准</span><br><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line"><span class="addition">+  url: /images/&lt;自己放的图片完整名&gt;</span></span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line"><span class="addition">+  rounded: true</span></span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line"><span class="addition">+  rotated: true</span></span><br></pre></td></tr></table></figure><h3 id="添加联系方式"><a href="#添加联系方式" class="headerlink" title="添加联系方式"></a>添加联系方式</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 181 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 181 行，请以实际情况为准</span><br><span class="line"># Social Links</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line">social:</span><br><span class="line"><span class="deletion">-  #GitHub: https://github.com/yourname || github</span></span><br><span class="line"><span class="deletion">-  #E-Mail: mailto:yourname@gmail.com || envelope</span></span><br><span class="line">  #Weibo: https://weibo.com/yourname || weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line">  #RSS: /atom.xml || rss</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 181 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 181 行，请以实际情况为准</span><br><span class="line"># Social Links</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line">social:</span><br><span class="line"><span class="addition">+  blog: https://blog.ql-isaac.cn/ || sticky-note</span></span><br><span class="line"><span class="addition">+  www: https://ql-isaac.cn/ || quora</span></span><br><span class="line"><span class="addition">+  nav: https://nav.ql-isaac.cn/ || location-arrow</span></span><br><span class="line"><span class="addition">+  space: https://space.ql-isaac.cn/ || codepen</span></span><br><span class="line"><span class="addition">+  GitHub: https://github.com/ql-isaac || github</span></span><br><span class="line"><span class="addition">+  E-Mail: mailto:834471527@qq.com || envelope</span></span><br><span class="line">  #Weibo: https://weibo.com/yourname || weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line">  #RSS: /atom.xml || rss</span><br></pre></td></tr></table></figure><h3 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 214 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 214 行，请以实际情况为准</span><br><span class="line">links:</span><br><span class="line"><span class="deletion">-  #Title: http://yoursite.com</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 214 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 214 行，请以实际情况为准</span><br><span class="line">links:</span><br><span class="line"><span class="addition">+  &lt;标题 1&gt;: &lt;地址 1&gt;</span></span><br><span class="line"><span class="addition">+  &lt;标题 2&gt;: &lt;地址 2&gt;</span></span><br><span class="line"><span class="addition">+  &lt;标题 3&gt;: &lt;地址 3&gt;</span></span><br></pre></td></tr></table></figure><p>　　演示视频：</p><p><video id="video2" preload controls loop style="height: 100%;width: 100%;object-fit: cover;"></video></p><script>  if (Hls.isSupported()) {    var video2 = document.getElementById('video2');    var hls = new Hls();    hls.loadSource('https://cdn.jsdelivr.net/gh/ql-isaac/post-videos-1/添加友情链接/添加友情链接.m3u8');    hls.attachMedia(video2);    hls.on(Hls.Events.MANIFEST_PARSED,function() {      video.play();  });  }</script><h3 id="Use-icon-instead-of-the-symbol-to-indicate-the-tag-at-the-bottom-of-the-post"><a href="#Use-icon-instead-of-the-symbol-to-indicate-the-tag-at-the-bottom-of-the-post" class="headerlink" title="Use icon instead of the symbol # to indicate the tag at the bottom of the post"></a>Use icon instead of the symbol # to indicate the tag at the bottom of the post</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 272 行（随着 NexT 的不断更新，本行对应在你的_config.yml中不一定是第 272 行，请以实际情况为准</span><br><span class="line"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span><br><span class="line"><span class="deletion">-tag_icon: false</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 272 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 272 行，请以实际情况为准</span><br><span class="line"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span><br><span class="line"><span class="addition">+tag_icon: true</span></span><br></pre></td></tr></table></figure><p>　　效果展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ql-isaac/post-images-1/My-HexoBlog-with-NexT(2)/tag.png" alt="tag"></p><h3 id="设置文本对齐方式为左对齐"><a href="#设置文本对齐方式为左对齐" class="headerlink" title="设置文本对齐方式为左对齐"></a>设置文本对齐方式为左对齐</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 344 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 344 行，请以实际情况为准</span><br><span class="line"># Set the text alignment in posts / pages.</span><br><span class="line">text_align:</span><br><span class="line">  # Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br><span class="line"><span class="deletion">-  desktop: justify</span></span><br><span class="line"><span class="deletion">-  mobile: justify</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 344 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 344 行，请以实际情况为准</span><br><span class="line"># Set the text alignment in posts / pages.</span><br><span class="line">text_align:</span><br><span class="line">  # Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br><span class="line"><span class="addition">+  desktop: left</span></span><br><span class="line"><span class="addition">+  mobile: left</span></span><br></pre></td></tr></table></figure><h3 id="代码块设置"><a href="#代码块设置" class="headerlink" title="代码块设置"></a>代码块设置</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 362 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 362 行，请以实际情况为准</span><br><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line"><span class="deletion">-  highlight_theme: normal</span></span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line"><span class="deletion">-    enable: false</span></span><br><span class="line">    # Show text copy result.</span><br><span class="line"><span class="deletion">-    show_result: false</span></span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 362 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 362 行，请以实际情况为准</span><br><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line"><span class="addition">+  highlight_theme: solarized</span></span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line"><span class="addition">+    enable: true</span></span><br><span class="line">    # Show text copy result.</span><br><span class="line"><span class="addition">+    show_result: true</span></span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br></pre></td></tr></table></figure><h3 id="回到顶部按钮设置"><a href="#回到顶部按钮设置" class="headerlink" title="回到顶部按钮设置"></a>回到顶部按钮设置</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 375 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 375 行，请以实际情况为准</span><br><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line"><span class="deletion">-  scrollpercent: false</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 375 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 375 行，请以实际情况为准</span><br><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line"><span class="addition">+  scrollpercent: true</span></span><br></pre></td></tr></table></figure><h3 id="在页面顶部显示浏览进度"><a href="#在页面顶部显示浏览进度" class="headerlink" title="在页面顶部显示浏览进度"></a>在页面顶部显示浏览进度</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 382 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 382 行，请以实际情况为准</span><br><span class="line"># Reading progress bar</span><br><span class="line">reading_progress:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 3px</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 382 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 382 行，请以实际情况为准</span><br><span class="line"># Reading progress bar</span><br><span class="line">reading_progress:</span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 3px</span><br></pre></td></tr></table></figure><h3 id="在右上角添加渲染本站的源码仓库传送门"><a href="#在右上角添加渲染本站的源码仓库传送门" class="headerlink" title="在右上角添加渲染本站的源码仓库传送门"></a>在右上角添加渲染本站的源码仓库传送门</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 399 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 399 行，请以实际情况为准</span><br><span class="line"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="line">github_banner:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="deletion">-  permalink: https://github.com/yourname</span></span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 399 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 399 行，请以实际情况为准</span><br><span class="line"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="line">github_banner:</span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"><span class="addition">+  permalink: https://github.com/ql-isaac/HexoBlog/tree/main/NexT</span></span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 419 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 419 行，请以实际情况为准</span><br><span class="line">font:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements inside &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line"><span class="deletion">-    family: Lato</span></span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for site title (.site-title).</span><br><span class="line">  title:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts (.post-body).</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line"><span class="deletion">-    family:</span></span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 419 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 419 行，请以实际情况为准</span><br><span class="line">font:</span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements inside &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line"><span class="addition">+    family:</span></span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for site title (.site-title).</span><br><span class="line">  title:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts (.post-body).</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line"><span class="addition">+    family: Noto Serif SC</span></span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br></pre></td></tr></table></figure><h3 id="优雅地查看图片"><a href="#优雅地查看图片" class="headerlink" title="优雅地查看图片"></a>优雅地查看图片</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 533 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 533 行，请以实际情况为准</span><br><span class="line"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span><br><span class="line"># For more information: https://fancyapps.com/fancybox</span><br><span class="line"><span class="deletion">-fancybox: false</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 533 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 533 行，请以实际情况为准</span><br><span class="line"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span><br><span class="line"># For more information: https://fancyapps.com/fancybox</span><br><span class="line"><span class="addition">+fancybox: true</span></span><br></pre></td></tr></table></figure><h3 id="开启图片懒加载"><a href="#开启图片懒加载" class="headerlink" title="开启图片懒加载"></a>开启图片懒加载</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 542 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 542 行，请以实际情况为准</span><br><span class="line"># Vanilla JavaScript plugin for lazyloading images.</span><br><span class="line"># For more information: https://github.com/ApoorvSaxena/lozad.js</span><br><span class="line"><span class="deletion">-lazyload: false</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 542 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 542 行，请以实际情况为准</span><br><span class="line"># Vanilla JavaScript plugin for lazyloading images.</span><br><span class="line"># For more information: https://github.com/ApoorvSaxena/lozad.js</span><br><span class="line"><span class="addition">+lazyload: true</span></span><br></pre></td></tr></table></figure><h3 id="添加-Valine-评论系统"><a href="#添加-Valine-评论系统" class="headerlink" title="添加 Valine 评论系统"></a>添加 Valine 评论系统</h3><p>　　Valine 是基于 LeanCloud 的，首先需要<a href="https://leancloud.cn/dashboard/login.html">注册 LeanCloud 账号</a>，注意需要验证邮箱，注册成功后进入控制台，需要先实名认证，认证成功后，点击创建应用，新应用名称就填 Valine，这个随便，选择开发版，点击创建，点击存储图标，点击创建 Class，Class 名称填 Comment，添加，再点击创建 Class，Class 名称填 Counter，添加，创建 Class 成功后如下图。</p><p><img src="https://image.ql-isaac.cn/%E5%88%9B%E5%BB%BAClass.png"></p><p>　　点击左边的设置，点击安全中心，服务开关里仅打开数据存储服务，Web 安全域名中填写自己的博客地址，保存，点击左侧应用 keys，获取到&lt;自己的 App ID&gt;和&lt;自己的 App key&gt;。</p><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 578 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 578 行，请以实际情况为准</span><br><span class="line"># Multiple Comment System Support</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line"><span class="deletion">-  active:</span></span><br><span class="line">  # Setting `true` means remembering the comment system selected by the visitor.</span><br><span class="line">  storage: true</span><br><span class="line">  # Lazyload all comment systems.</span><br><span class="line">  lazyload: false</span><br><span class="line">  # Modify texts or order for any navs, here are some examples.</span><br><span class="line">  nav:</span><br><span class="line">    #disqus:</span><br><span class="line">    #  text: Load Disqus</span><br><span class="line">    #  order: -1</span><br><span class="line">    #gitalk:</span><br><span class="line">    #  order: -2</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 578 行（随着 NexT 的不断更新，本行对应在你的 _config.yml中不一定是第 578 行，请以实际情况为准</span><br><span class="line"># Multiple Comment System Support</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line"><span class="addition">+  active: valine</span></span><br><span class="line">  # Setting `true` means remembering the comment system selected by the visitor.</span><br><span class="line">  storage: true</span><br><span class="line">  # Lazyload all comment systems.</span><br><span class="line">  lazyload: false</span><br><span class="line">  # Modify texts or order for any navs, here are some examples.</span><br><span class="line">  nav:</span><br><span class="line">    #disqus:</span><br><span class="line">    #  text: Load Disqus</span><br><span class="line">    #  order: -1</span><br><span class="line">    #gitalk:</span><br><span class="line">    #  order: -2</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 625 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 625 行，请以实际情况为准</span><br><span class="line"># Valine</span><br><span class="line"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br><span class="line">valine:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="deletion">-  appid: # Your leancloud application appid</span></span><br><span class="line"><span class="deletion">-  appkey: # Your leancloud application appkey</span></span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line"><span class="deletion">-  language: # Language, available values: en, zh-cn</span></span><br><span class="line">  visitor: false # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line"><span class="deletion">-  recordIP: false # Whether to record the commenter IP</span></span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line">  #post_meta_order: 0</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 625 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 625 行，请以实际情况为准</span><br><span class="line"># Valine</span><br><span class="line"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br><span class="line">valine:</span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"><span class="addition">+  appid: &lt;自己的 App ID&gt;</span></span><br><span class="line"><span class="addition">+  appkey: &lt;自己的 App key&gt;</span></span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line"><span class="addition">+  language: zh-cn</span></span><br><span class="line">  visitor: false # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line"><span class="addition">+  recordIP: true # Whether to record the commenter IP</span></span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line">  #post_meta_order: 0</span><br></pre></td></tr></table></figure><h3 id="开启-busuanzi-统计"><a href="#开启-busuanzi-统计" class="headerlink" title="开启 busuanzi 统计"></a>开启 busuanzi 统计</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 725 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 725 行，请以实际情况为准</span><br><span class="line"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 725 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 725 行，请以实际情况为准</span><br><span class="line"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><h3 id="添加本地搜索功能"><a href="#添加本地搜索功能" class="headerlink" title="添加本地搜索功能"></a>添加本地搜索功能</h3><p>　　在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，输入如下命令安装 hexo-generator-searchdb 模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-generator-searchdb</span><br></pre></td></tr></table></figure><p>　　开启本地搜索功能。编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 753 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 753 行，请以实际情况为准</span><br><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 753 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 753 行，请以实际情况为准</span><br><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false　</span><br></pre></td></tr></table></figure><h3 id="设置-Note-tag"><a href="#设置-Note-tag" class="headerlink" title="设置 Note tag"></a>设置 Note tag</h3><p>　　编辑 NexT 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 798 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 798 行，请以实际情况为准</span><br><span class="line"># Note tag (bs-callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line"><span class="deletion">-  style: simple</span></span><br><span class="line"><span class="deletion">-  icons: false</span></span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\themes\next\_config.yml 的第 798 行（随着 NexT 的不断更新，本行对应在你的 _config.yml 中不一定是第 798 行，请以实际情况为准</span><br><span class="line"># Note tag (bs-callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line"><span class="addition">+  style: flat</span></span><br><span class="line"><span class="addition">+  icons: true</span></span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://theme-next.js.org/">NexT 主题文档</a></p><p><a href="https://lixint.github.io/">lixint</a></p><p><a href="http://www.dragonbaby308.com/">dragonbaby308</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的 HexoBlog 的诞生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
            <tag> Hexo v4.2.0 </tag>
            
            <tag> NexT v7.7.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 HexoBlog 的诞生（一）</title>
      <link href="2020/01/24/My-HexoBlog-with-NexT(1)/"/>
      <url>2020/01/24/My-HexoBlog-with-NexT(1)/</url>
      
        <content type="html"><![CDATA[<p>　　本文记录和讲解一下我的 HexoBlog 是如何一步一步被部署至 Github Pages 上的，可供大家参考。部署完成后可参考我的下一篇文章《我的 HexoBlog 的诞生（二）》对自己的 HexoBlog 进行个性化设置和配置，不过在此之前，需阅读<a href="https://hexo.io/zh-cn/docs/"> Hexo 官方文档</a>，对 Hexo 有基本的完整的认识。</p><a id="more"></a><h3 id="注册自己的-Github-账户，创建-Github-Pages"><a href="#注册自己的-Github-账户，创建-Github-Pages" class="headerlink" title="注册自己的 Github 账户，创建 Github Pages"></a>注册自己的 Github 账户，创建 Github Pages</h3><ol><li>进入<a href="http://github.com/"> Github 首页</a>，点击 Sign up 注册，填写 Username 等，验证邮箱，注册成功；</li><li>点击右上角的加号，点击 New repository，填写 Repository name，这里的仓库名建议按照”&lt;自己的 Github 用户名&gt;.github.io“的格式来填，填写 Description，点击 Creat repository，创建 Github Pages 成功；</li></ol><h3 id="安装-Node-js，安装-Git-和-Git-的配置"><a href="#安装-Node-js，安装-Git-和-Git-的配置" class="headerlink" title="安装 Node.js，安装 Git 和 Git 的配置"></a>安装 Node.js，安装 Git 和 Git 的配置</h3><ol start="3"><li><p>进入<a href="https://nodejs.org/zh-cn/"> Node.js 官方网站</a>，点击下载 LTX（Long Term Support）版，我下载的是<a href="https://nodejs.org/download/release/v12.14.0/"> v12.14.0 版本的 msi 安装程序</a>，安装步骤非常简单，一直 next；</p></li><li><p>进入<a href="https://git-scm.com/downloads"> Git 官方网站下载页面</a>，选择 Windows 版本的 Git 下载，我下载的是<a href="https://pan.baidu.com/s/1YJxkbnkwx-9x4Hr5Sz4jMQ"> v2.25.0 版本的 exe 安装程序(提取码：u7fp)</a>，<a href="https://blog.ql-isaac.cn/2020/01/24/What-is-Git/#more">安装和配置步骤</a>记录在另一篇文章中；</p></li></ol><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><ol start="5"><li><p>在合适的路径下新建一个文件夹，文件夹名自定义，例如 HexoBlog，作为&lt;存储 HexoBlog 的文件夹&gt;；</p></li><li><p>打开&lt;存储 HexoBlog 的文件夹&gt;，在空白处点鼠标的右键，选择 Git Bash Here 进入终端；</p></li><li><p>安装 cnpm 提高下载速度，以后下载插件都可用 cnpm（即将下载某一个插件的命令中的 npm 改为 cnpm）。在终端输入如下命令，回车，等待 cnpm 下载完成；</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>在终端输入如下命令，回车，等待 hexo-cli 下载完成，完成后，可输入<code>hexo -v</code>查看相关版本信息；</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>在终端输入<code>hexo init</code>，等待，可在&lt;存储 HexoBlog 的文件夹&gt;中看到生成了如下图所示的文件。</p></li></ol><p><img src="https://image.ql-isaac.cn/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6.png" alt="初始文件"></p><h3 id="本地部署我的-HexoBlog"><a href="#本地部署我的-HexoBlog" class="headerlink" title="本地部署我的 HexoBlog"></a>本地部署我的 HexoBlog</h3><ol start="10"><li>在终端输入<code>hexo s</code>，之后打开浏览器，输入 localhost:4000，可看到本地部署的我的 HexoBlog，表明没什么问题；</li></ol><h3 id="部署至-Github-Pages"><a href="#部署至-Github-Pages" class="headerlink" title="部署至 Github Pages"></a>部署至 Github Pages</h3><ol start="11"><li><p>安装 Hexo 的 Git 插件。终端输入如下命令，回车，等待下载完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>编辑 Hexo 的配置文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 97 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 97 行，请以实际情况为准）</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:  </span><br><span class="line"><span class="deletion">-  type: &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 97 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 97 行，请以实际情况为准）</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:  </span><br><span class="line"><span class="addition">+  type: git  </span></span><br><span class="line"><span class="addition">+  repo: </span></span><br><span class="line"><span class="addition">+   github: git@github.com:&lt;自己的 Github 用户名&gt;/&lt;自己的 Github 用户名&gt;.github.io.git,master        </span></span><br></pre></td></tr></table></figure></li><li><p>在终端输入<code>hexo g -d</code>，回车，进行博客的最终操作——生成静态文件后立即部署到 Github Pages 中；</p></li><li><p><a href="https://ql-isaac.github.io/">大功告成</a>（将 ql-isaac 替换成自己的 Github 用户名）。</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.bilibili.com/video/av44544186">手把手教你从 0 开始搭建自己的个人博客|无坑版视频教程|hexo（bilibili）</a></p><p><a href="https://caiyantao.gitee.io/">caiyantao（个人博客）</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的 HexoBlog 的诞生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 企业版 LTSC </tag>
            
            <tag> Node.js v12.14.0 </tag>
            
            <tag> Hexo v4.2.0 </tag>
            
            <tag> Git v2.25.0.windows.1 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
